{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\vappu\\\\Documents\\\\ReactKansio\\\\quiz-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useEffect, useState, useReducer } from 'react';\nimport ButtonAppBar from './ButtonAppBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport quizzesImported from './Quizzes';\nimport uuid from 'react-uuid';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport AddIcon from '@material-ui/icons/Add';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport { Container, Paper, Button, Switch, FormControlLabel, TextField } from '@material-ui/core';\nimport axios from 'axios';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  }\n}));\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    '&$checked': {\n      color: green[600]\n    }\n  },\n  checked: {}\n})(props => /*#__PURE__*/_jsxDEV(Checkbox, {\n  color: \"default\",\n  ...props\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 39,\n  columnNumber: 15\n}, this)); // ----------------REDUCER----------------------------------------------------\n\nfunction reducer(state, action) {\n  let deepCopy = JSON.parse(JSON.stringify(state));\n\n  switch (action.type) {\n    case 'increment':\n      return {\n        count: state.count + 1\n      };\n\n    case \"INIT_DATA\":\n      console.log(action.data);\n      return action.data;\n    /// <--- this should be state\n\n    case \"ANSWER_CHANGED\":\n      console.log(state);\n      console.log(action.data);\n      console.log(deepCopy);\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].answer = action.data.newText;\n      return deepCopy;\n\n    case \"QUESTION_CHANGED\":\n      console.log(state);\n      console.log(action.data);\n      console.log(deepCopy);\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].question = action.data.newText;\n      return deepCopy;\n\n    case \"QUIZ_CHANGED\":\n      return deepCopy;\n\n    case \"NEW_ANSWER\":\n      return deepCopy;\n\n    case \"NEW_QUESTION\":\n      return deepCopy;\n\n    case \"NEW QUIZ\":\n      return deepCopy;\n\n    case \"DELETE_ANSWER\":\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions.splice(action.data.answerIndex, 1);\n      return deepCopy;\n\n    case \"DELETE_QUESTION\":\n      deepCopy[action.data.quizIndex].quizQuestions.splice(action.data.questionIndex, 1);\n      return deepCopy;\n\n    case \"DELETE_QUIZ\":\n      // TODO: implement controls\n      deepCopy[action.data.quizIndex].splice(action.data.quizIndex, 1);\n      return deepCopy;\n\n    case \"SELECT_TOGGLE\":\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].selected = !deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].selected;\n      return deepCopy;\n\n    case \"CORRECT_TOGGLE\":\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].correct = !deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].correct;\n      return deepCopy;\n\n    default:\n      throw new Error();\n  }\n} // ----------------APP-------------------------------------------------------\n\n\nfunction App() {\n  _s();\n\n  const classes = useStyles();\n  const [dataAlustettu, setDataAlustettu] = useState(false);\n  const [quiz, setQuiz] = useState(0);\n  const [answersVisible, setAnswersVisible] = useState(false);\n  const [state, dispatch] = useReducer(reducer, []);\n  useEffect(() => {\n    const createData = async () => {\n      try {\n        const initialData = quizzesImported;\n        let result = await axios.post(\"http://localhost:3005/quizzes\", initialData);\n        dispatch({\n          type: \"INIT_DATA\",\n          data: initialData\n        });\n        setDataAlustettu(true);\n        console.log(\"createData\");\n        console.log(state);\n      } catch (exception) {\n        alert(\"Tietokannan alustaminen epäonnistui\" + exception);\n      }\n    };\n\n    const fetchData = async () => {\n      try {\n        let result = await axios.get(\"http://localhost:3005/quizzes\");\n\n        if (result.data.length > 0) {\n          // setData(result.data);\n          dispatch({\n            type: \"INIT_DATA\",\n            data: result.data\n          });\n          setDataAlustettu(true);\n          console.log(\"fetchData\");\n          console.log(state);\n        } else {\n          throw \"Nyt pitää data kyllä alustaa!\";\n        }\n      } catch (exception) {\n        createData();\n        console.log(exception);\n      }\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const updateData = async () => {\n      try {\n        console.log(\"update\");\n        console.log(state);\n        let result = await axios.put(\"http://localhost:3005/quizzes\", state);\n        console.log(result);\n      } catch (exception) {\n        console.log(\"Datan päivitys ei onnistunut\");\n      } finally {}\n    };\n\n    if (dataAlustettu) {\n      updateData();\n    }\n  }, [state]);\n\n  const selectQuiz = quizNo => {\n    setQuiz(quizNo);\n  };\n\n  const toggleAnswers = () => {\n    setAnswersVisible(!answersVisible);\n  }; // --------------------------------------\n  // const addQuiz = () => {\n  //   let deepCopy = JSON.parse(JSON.stringify(data))\n  //   let newQuiz = { quizName: \"New Quiz\", quizQuestions: [{ question: \"\", answerOptions: [{ answer: \"\", correct: false, selected: false, uuid: uuid() }], uuid: uuid() }], uuid: uuid() }\n  //   deepCopy.push(newQuiz)\n  //   setData(deepCopy)\n  // }\n  // const addNewQuestion = (quizIndex) => {\n  //   let deepCopy = JSON.parse(JSON.stringify(data))\n  //   let newQuestion = { question: \"\", answerOptions: [{ answer: \"\", correct: false, selected: false, uuid: uuid() }], uuid: uuid() }\n  //   deepCopy[quizIndex].quizQuestions.push(newQuestion)\n  //   setData(deepCopy)\n  // }\n  // const addNewAnswer = (quizIndex, questionIndex) => {\n  //   let deepCopy = JSON.parse(JSON.stringify(data))\n  //   let newAnswer = { answer: \"\", correct: false, selected: false, uuid: uuid() }\n  //   deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.push(newAnswer)\n  //   setData(deepCopy)\n  // }\n  // --------------------------------------\n\n\n  const [status, setStatus] = React.useState({\n    teacherMode: true\n  });\n\n  const handleChange = event => {\n    setStatus({ ...status,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ButtonAppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"quizContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Switch, {\n            checked: status.teacherMode,\n            onChange: handleChange,\n            name: \"teacherMode\",\n            inputProps: {\n              'aria-label': 'secondary checkbox'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this),\n          label: \"Teacher mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 36\n        }, this), dataAlustettu ? state.map((val, index) => {\n          // {dataAlustettu ? data.map((val, index) => {\n          return /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: () => selectQuiz(index),\n            children: val.quizName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 20\n          }, this);\n        }) : null, status.teacherMode ? /*#__PURE__*/_jsxDEV(Button, {\n          children: /*#__PURE__*/_jsxDEV(AddCircleIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 33\n        }, this) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), dataAlustettu ? state[quiz].quizQuestions.map((value, parentIndex) => {\n        // {dataAlustettu ? data[quiz].quizQuestions.map((value, parentIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"questionCard\",\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 1,\n            children: /*#__PURE__*/_jsxDEV(List, {\n              className: classes.root,\n              children: [status.teacherMode ? /*#__PURE__*/_jsxDEV(ListItem, {\n                role: undefined,\n                dense: true,\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  onChange: event => dispatch({\n                    type: \"QUESTION_CHANGED\",\n                    data: {\n                      newText: event.target.value,\n                      quizIndex: quiz,\n                      questionIndex: parentIndex\n                    }\n                  }),\n                  size: \"small\",\n                  label: \"Question \" + (parentIndex + 1),\n                  variant: \"outlined\",\n                  value: value.question\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"deleteButton\",\n                  onClick: event => dispatch({\n                    type: \"DELETE_QUESTION\",\n                    data: {\n                      newText: event.target.value,\n                      quizIndex: quiz,\n                      questionIndex: parentIndex\n                    }\n                  }),\n                  children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 231,\n                    columnNumber: 198\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 23\n                }, this)]\n              }, value.uuid, true, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"question\",\n                children: value.question\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 23\n              }, this), value.answerOptions.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(ListItem, {\n                  role: undefined,\n                  dense: true,\n                  children: [answersVisible || status.teacherMode ? /*#__PURE__*/_jsxDEV(ListItemIcon, {\n                    children: /*#__PURE__*/_jsxDEV(GreenCheckbox, {\n                      onChange: event => dispatch({\n                        type: \"CORRECT_TOGGLE\",\n                        data: {\n                          newText: event.target.value,\n                          quizIndex: quiz,\n                          questionIndex: parentIndex,\n                          answerIndex: index\n                        }\n                      }),\n                      checked: value.correct,\n                      edge: \"start\",\n                      tabIndex: -1,\n                      hidden: answersVisible,\n                      disabled: !status.teacherMode\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 240,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 239,\n                    columnNumber: 66\n                  }, this) : null, /*#__PURE__*/_jsxDEV(ListItemIcon, {\n                    children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      onChange: event => dispatch({\n                        type: \"SELECT_TOGGLE\",\n                        data: {\n                          newText: event.target.value,\n                          quizIndex: quiz,\n                          questionIndex: parentIndex,\n                          answerIndex: index\n                        }\n                      }),\n                      checked: value.selected,\n                      edge: \"start\",\n                      tabIndex: -1\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 250,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 249,\n                    columnNumber: 25\n                  }, this), status.teacherMode ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      onChange: event => dispatch({\n                        type: \"ANSWER_CHANGED\",\n                        data: {\n                          newText: event.target.value,\n                          quizIndex: quiz,\n                          questionIndex: parentIndex,\n                          answerIndex: index\n                        }\n                      }),\n                      size: \"small\",\n                      label: \"Answer \" + (index + 1),\n                      variant: \"outlined\",\n                      value: value.answer\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 259,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                      id: index,\n                      primary: value.answer\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 262,\n                      columnNumber: 34\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 262,\n                    columnNumber: 29\n                  }, this)]\n                }, value.uuid, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this);\n      }) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"CcEpZkOmZJ8dV+VWQPg/UtcjMdQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/vappu/Documents/ReactKansio/quiz-app/src/App.js"],"names":["React","useEffect","useState","useReducer","ButtonAppBar","makeStyles","List","ListItem","ListItemIcon","ListItemText","Checkbox","quizzesImported","uuid","DeleteIcon","AddCircleIcon","AddIcon","withStyles","green","Container","Paper","Button","Switch","FormControlLabel","TextField","axios","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","margin","spacing","GreenCheckbox","color","checked","props","reducer","state","action","deepCopy","JSON","parse","stringify","type","count","console","log","data","quizIndex","quizQuestions","questionIndex","answerOptions","answerIndex","answer","newText","question","splice","selected","correct","Error","App","classes","dataAlustettu","setDataAlustettu","quiz","setQuiz","answersVisible","setAnswersVisible","dispatch","createData","initialData","result","post","exception","alert","fetchData","get","length","updateData","put","selectQuiz","quizNo","toggleAnswers","status","setStatus","teacherMode","handleChange","event","target","name","map","val","index","quizName","value","parentIndex","undefined"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useEffect, useState, useReducer } from 'react';\nimport ButtonAppBar from './ButtonAppBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport quizzesImported from './Quizzes'\nimport uuid from 'react-uuid'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport AddIcon from '@material-ui/icons/Add';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport { Container, Paper, Button, Switch, FormControlLabel, TextField } from '@material-ui/core';\nimport axios from 'axios';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    '&$checked': {\n      color: green[600],\n    },\n  },\n  checked: {},\n})((props) => <Checkbox color=\"default\" {...props} />);\n\n// ----------------REDUCER----------------------------------------------------\n\nfunction reducer(state, action) {\n  let deepCopy = JSON.parse(JSON.stringify(state))\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case \"INIT_DATA\":\n      console.log(action.data)\n      return action.data; /// <--- this should be state\n    case \"ANSWER_CHANGED\":\n      console.log(state);\n      console.log(action.data);\n      console.log(deepCopy);\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].answer = action.data.newText;\n      return deepCopy;\n    case \"QUESTION_CHANGED\":\n      console.log(state);\n      console.log(action.data);\n      console.log(deepCopy);\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].question = action.data.newText;\n      return deepCopy;\n    case \"QUIZ_CHANGED\":\n      return deepCopy;\n    case \"NEW_ANSWER\":\n      return deepCopy;\n    case \"NEW_QUESTION\":\n      return deepCopy;\n    case \"NEW QUIZ\":\n      return deepCopy;\n    case \"DELETE_ANSWER\":\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions.splice(action.data.answerIndex, 1)\n      return deepCopy;\n    case \"DELETE_QUESTION\":\n      deepCopy[action.data.quizIndex].quizQuestions.splice(action.data.questionIndex, 1)\n      return deepCopy;\n    case \"DELETE_QUIZ\":\n      // TODO: implement controls\n      deepCopy[action.data.quizIndex].splice(action.data.quizIndex, 1)\n      return deepCopy;\n    case \"SELECT_TOGGLE\":\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].selected = \n      !deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].selected;\n      return deepCopy;\n    case \"CORRECT_TOGGLE\":\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].correct = \n        !deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].correct;\n      return deepCopy;\n    default:\n      throw new Error();\n  }\n}\n\n// ----------------APP-------------------------------------------------------\n\nfunction App() {\n  const classes = useStyles();\n  const [dataAlustettu, setDataAlustettu] = useState(false);\n  const [quiz, setQuiz] = useState(0);\n  const [answersVisible, setAnswersVisible] = useState(false);\n  const [state, dispatch] = useReducer(reducer, []);\n\n  useEffect(() => {\n    const createData = async () => {\n      try {\n        const initialData = quizzesImported\n        let result = await axios.post(\"http://localhost:3005/quizzes\", initialData)\n        dispatch({ type: \"INIT_DATA\", data: initialData })\n        setDataAlustettu(true)\n        console.log(\"createData\")\n        console.log(state)\n      } catch (exception) {\n        alert(\"Tietokannan alustaminen epäonnistui\" + exception)\n      }\n    }\n\n    const fetchData = async () => {\n      try {\n        let result = await axios.get(\"http://localhost:3005/quizzes\")\n        if (result.data.length > 0) {\n          // setData(result.data);\n          dispatch({ type: \"INIT_DATA\", data: result.data })\n          setDataAlustettu(true)\n          console.log(\"fetchData\")\n          console.log(state)\n        } else {\n          throw (\"Nyt pitää data kyllä alustaa!\")\n        }\n      }\n      catch (exception) {\n        createData();\n        console.log(exception)\n      }\n    }\n    fetchData();\n  }, [])\n\n  useEffect(() => {\n    const updateData = async () => {\n      try {\n        console.log(\"update\")\n        console.log(state)\n        let result = await axios.put(\"http://localhost:3005/quizzes\", state)\n        console.log(result)\n      } catch (exception) {\n        console.log(\"Datan päivitys ei onnistunut\")\n      }\n      finally {\n\n      }\n    }\n    if (dataAlustettu) {\n      updateData();\n    }\n  }, [state])\n\n  const selectQuiz = (quizNo) => {\n    setQuiz(quizNo);\n  }\n\n  const toggleAnswers = () => {\n    setAnswersVisible(!answersVisible);\n  }\n\n  // --------------------------------------\n\n  // const addQuiz = () => {\n  //   let deepCopy = JSON.parse(JSON.stringify(data))\n  //   let newQuiz = { quizName: \"New Quiz\", quizQuestions: [{ question: \"\", answerOptions: [{ answer: \"\", correct: false, selected: false, uuid: uuid() }], uuid: uuid() }], uuid: uuid() }\n  //   deepCopy.push(newQuiz)\n  //   setData(deepCopy)\n  // }\n\n  // const addNewQuestion = (quizIndex) => {\n  //   let deepCopy = JSON.parse(JSON.stringify(data))\n  //   let newQuestion = { question: \"\", answerOptions: [{ answer: \"\", correct: false, selected: false, uuid: uuid() }], uuid: uuid() }\n  //   deepCopy[quizIndex].quizQuestions.push(newQuestion)\n  //   setData(deepCopy)\n  // }\n\n  // const addNewAnswer = (quizIndex, questionIndex) => {\n  //   let deepCopy = JSON.parse(JSON.stringify(data))\n  //   let newAnswer = { answer: \"\", correct: false, selected: false, uuid: uuid() }\n  //   deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.push(newAnswer)\n  //   setData(deepCopy)\n  // }\n\n  // --------------------------------------\n\n  const [status, setStatus] = React.useState({\n    teacherMode: true,\n  });\n\n  const handleChange = (event) => {\n    setStatus({ ...status, [event.target.name]: event.target.checked });\n  };\n\n  return (\n    <div>\n      <ButtonAppBar />\n      <Container className=\"quizContainer\">\n        <div className={classes.root}>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={status.teacherMode}\n                onChange={handleChange}\n                name=\"teacherMode\"\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\n              />\n            }\n            label=\"Teacher mode\" /><br />\n          {dataAlustettu ? state.map((val, index) => {\n            // {dataAlustettu ? data.map((val, index) => {\n            return <Button variant=\"outlined\" onClick={() => selectQuiz(index)}>{val.quizName}</Button>\n          })\n            : null}\n          {status.teacherMode ? <Button ><AddCircleIcon /></Button> : \"\"}\n          {/* {status.teacherMode ? <Button onClick={() => addQuiz()}><AddCircleIcon /></Button> : \"\"} */}\n        </div>\n\n        {dataAlustettu ? state[quiz].quizQuestions.map((value, parentIndex) => {\n          // {dataAlustettu ? data[quiz].quizQuestions.map((value, parentIndex) => {\n          return (\n            <div className=\"questionCard\">\n              <Paper elevation={1}>\n                <List className={classes.root}>\n                  {status.teacherMode ?\n                    <ListItem key={value.uuid} role={undefined} dense >\n                      <TextField  fullWidth onChange={(event) => dispatch({ type: \"QUESTION_CHANGED\", data: { newText: event.target.value, quizIndex: quiz, questionIndex: parentIndex} })} size=\"small\" label={\"Question \" + (parentIndex + 1)} variant=\"outlined\" value={value.question} />\n                      <Button className=\"deleteButton\" onClick={(event) => dispatch({ type: \"DELETE_QUESTION\", data: { newText: event.target.value, quizIndex: quiz, questionIndex: parentIndex} })}><DeleteIcon /></Button>\n                      {/* <TextField fullWidth onChange={(event) => questionChanged(event, quiz, parentIndex)} size=\"small\" label={\"Question \" + (parentIndex + 1)} variant=\"outlined\" value={value.question} />\n                      <Button className=\"deleteButton\" onClick={() => deleteQuestion(quiz, parentIndex)}><DeleteIcon /></Button> */}\n                    </ListItem>\n                    : <div className=\"question\">{value.question}</div>}\n                  {value.answerOptions.map((value, index) => {\n                    return (\n                      <ListItem key={value.uuid} role={undefined} dense >\n                        { answersVisible || status.teacherMode ? <ListItemIcon>\n                          <GreenCheckbox\n                            onChange={(event) => dispatch({ type: \"CORRECT_TOGGLE\", data: { newText: event.target.value, quizIndex: quiz, questionIndex: parentIndex, answerIndex: index } })}\n                            checked={value.correct}\n                            edge=\"start\"\n                            tabIndex={-1}\n                            hidden={answersVisible}\n                            disabled={!status.teacherMode}\n                          />\n                        </ListItemIcon> : null}\n                        <ListItemIcon>\n                          <Checkbox\n                            onChange={(event) => dispatch({ type: \"SELECT_TOGGLE\", data: { newText: event.target.value, quizIndex: quiz, questionIndex: parentIndex, answerIndex: index } })}\n                            checked={value.selected}\n                            edge=\"start\"\n                            tabIndex={-1}\n                          />\n                        </ListItemIcon>\n                        {status.teacherMode ?\n                          <div>\n                            <TextField onChange={(event) => dispatch({ type: \"ANSWER_CHANGED\", data: { newText: event.target.value, quizIndex: quiz, questionIndex: parentIndex, answerIndex: index } })} size=\"small\" label={\"Answer \" + (index + 1)} variant=\"outlined\" value={value.answer} />\n                            {/* <Button className=\"deleteButton\" onClick={() => deleteAnswer(quiz, parentIndex, index)}><DeleteIcon /></Button> */}\n                          </div>\n                          : <div><ListItemText id={index} primary={value.answer} /></div>\n                        }\n                      </ListItem>\n                    )\n                  })}\n                  {/* {status.teacherMode ? <div className=\"addButton\"><Button onClick={() => addNewAnswer(quiz, parentIndex)}><AddCircleIcon /></Button></div> : \"\"} */}\n                </List>\n              </Paper>\n            </div>\n          );\n        })\n          : null}\n        {/* <div className=\"bottomButtons\">\n          {status.teacherMode ? <Button variant=\"contained\" onClick={() => addNewQuestion(quiz)}><AddIcon />   Add new question</Button> :\n            <Button variant=\"contained\" onClick={() => toggleAnswers()}>{answersVisible ? \"Hide correct answers\" : \"Show correct answers\"}</Button>\n          }</div> */}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}