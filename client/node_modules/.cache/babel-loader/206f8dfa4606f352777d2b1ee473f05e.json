{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\vappu\\\\Documents\\\\ReactKansio\\\\quiz-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport ButtonAppBar from './ButtonAppBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport quizzesImported from './Quizzes';\nimport { Container, Paper, Button, Switch, FormControlLabel, TextField } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  }\n}));\n\nfunction App() {\n  _s();\n\n  const initialData = quizzesImported;\n  const classes = useStyles();\n  const [data, setData] = useState([]);\n  const [dataAlustettu, setDataAlustettu] = useState(false);\n  const [quiz, setQuiz] = useState(0);\n  const [answersVisible, setAnswersVisible] = useState(false);\n  const [isTeacherView, setIsTeacherView] = useState(false);\n  useEffect(() => {\n    let jemma = window.localStorage;\n    let tempData = JSON.parse(jemma.getItem(\"data\"));\n\n    if (tempData == null) {\n      jemma.setItem(\"data\", JSON.stringify(initialData));\n      tempData = initialData;\n    }\n\n    setData(tempData);\n    setDataAlustettu(true);\n  }, []);\n  useEffect(() => {\n    if (dataAlustettu) {\n      window.localStorage.setItem(\"data\", JSON.stringify(data));\n    }\n  }, [data]);\n\n  const handleToggle = (event, index, parentIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected = !deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected;\n    setData(deepCopy);\n  };\n\n  const selectQuiz = quizNo => {\n    setQuiz(quizNo);\n  };\n\n  const toggleAnswers = () => {\n    setAnswersVisible(!answersVisible);\n  }; // --------------------------------------\n\n\n  const addNewQuestion = quizIndex => {\n    console.log(\"add new\");\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    let newQuestion = {\n      question: \"\",\n      answerOptions: [{\n        answer: \"\",\n        correct: \"\",\n        selected: \"\"\n      }]\n    };\n    deepCopy[quizIndex].quizQuestions.push(newQuestion);\n    setData(deepCopy);\n  };\n\n  const addNewAnswer = quizIndex => {\n    quizIndex = 0;\n    console.log(\"add new\");\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    let newQuestion = {\n      question: \"\",\n      answerOptions: [{\n        answer: \"\",\n        correct: \"\",\n        selected: \"\"\n      }]\n    };\n    deepCopy[quizIndex].quizQuestions.push(newQuestion);\n    setData(deepCopy);\n  };\n\n  const answerChanged = () => {\n    console.log(\"answerChanged\");\n  };\n\n  const deleteAnswer = () => {\n    console.log(\"answer deleted\");\n  }; // --------------------------------------\n\n\n  const [status, setStatus] = React.useState({\n    teacherMode: true\n  });\n\n  const handleChange = event => {\n    setStatus({ ...status,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ButtonAppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"quizContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Switch, {\n            checked: status.teacherMode,\n            onChange: handleChange,\n            name: \"teacherMode\",\n            inputProps: {\n              'aria-label': 'secondary checkbox'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 11\n          }, this),\n          label: \"Teacher mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 31\n        }, this), data.map((val, index) => {\n          return /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: () => selectQuiz(index),\n            children: val.quizName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), dataAlustettu ? data[quiz].quizQuestions.map((value, parentIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"questionCard\",\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 1,\n            children: /*#__PURE__*/_jsxDEV(List, {\n              className: classes.root,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"question\",\n                children: value.question\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 17\n              }, this), value.answerOptions.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(ListItem, {\n                  role: undefined,\n                  dense: true,\n                  children: [answersVisible ? /*#__PURE__*/_jsxDEV(ListItemIcon, {\n                    children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      onChange: event => handleToggle(event, index, parentIndex),\n                      checked: value.correct,\n                      edge: \"start\",\n                      tabIndex: -1,\n                      hidden: answersVisible,\n                      disabled: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 131,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 130,\n                    columnNumber: 39\n                  }, this) : null, /*#__PURE__*/_jsxDEV(ListItemIcon, {\n                    children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      onChange: event => handleToggle(event, index, parentIndex),\n                      checked: value.selected,\n                      edge: \"start\",\n                      tabIndex: -1\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 141,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 21\n                  }, this), status.teacherMode ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(TextField, {\n                      id: \"outlined-basic\",\n                      onChange: answerChanged,\n                      size: \"small\",\n                      label: \"Answer \" + (index + 1),\n                      variant: \"outlined\",\n                      value: value.answer\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 150,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"deleteButton\",\n                      onClick: deleteAnswer,\n                      children: \"Delete\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 151,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 23\n                  }, this) : /*#__PURE__*/_jsxDEV(ListItemText, {\n                    id: index,\n                    primary: value.answer\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 153,\n                    columnNumber: 26\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 19\n                }, this);\n              }), status.teacherMode ? /*#__PURE__*/_jsxDEV(Button, {\n                className: \"addButton\",\n                onClick: addNewAnswer,\n                children: \"Add new answer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 39\n              }, this) : \"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }, this);\n      }) : \"\", /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottomButtons\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => toggleAnswers(),\n          children: answersVisible ? \"Hide answers\" : \"Show answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 15\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 135\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"tpILZYNOr+TGD9mI7lQybJZ+41s=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/vappu/Documents/ReactKansio/quiz-app/src/App.js"],"names":["React","useEffect","useState","ButtonAppBar","makeStyles","List","ListItem","ListItemIcon","ListItemText","Checkbox","quizzesImported","Container","Paper","Button","Switch","FormControlLabel","TextField","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","margin","spacing","App","initialData","classes","data","setData","dataAlustettu","setDataAlustettu","quiz","setQuiz","answersVisible","setAnswersVisible","isTeacherView","setIsTeacherView","jemma","window","localStorage","tempData","JSON","parse","getItem","setItem","stringify","handleToggle","event","index","parentIndex","deepCopy","quizQuestions","answerOptions","selected","selectQuiz","quizNo","toggleAnswers","addNewQuestion","quizIndex","console","log","newQuestion","question","answer","correct","push","addNewAnswer","answerChanged","deleteAnswer","status","setStatus","teacherMode","handleChange","target","name","checked","map","val","quizName","value","undefined"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport ButtonAppBar from './ButtonAppBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport quizzesImported from './Quizzes'\nimport {Container, Paper, Button, Switch, FormControlLabel, TextField} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nfunction App() {\n  const initialData = quizzesImported;\n\n  const classes = useStyles();\n  const [data, setData] = useState([])\n  const [dataAlustettu, setDataAlustettu] = useState(false)\n  const [quiz, setQuiz] = useState(0);\n  const [answersVisible, setAnswersVisible] = useState(false)\n  const [isTeacherView, setIsTeacherView] = useState(false)\n\n  useEffect(() => {\n    let jemma = window.localStorage;\n    let tempData = JSON.parse(jemma.getItem(\"data\"))\n    if (tempData == null) {\n      jemma.setItem(\"data\", JSON.stringify(initialData))\n      tempData = initialData\n    } \n    setData(tempData);\n    setDataAlustettu(true)\n  }, [])\n\n  useEffect(() => {\n    if (dataAlustettu) {\n      window.localStorage.setItem(\"data\", JSON.stringify(data))\n    }\n  }, [data])\n\n  const handleToggle = (event, index, parentIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected = !deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected;\n    setData(deepCopy)\n  };\n  \n  const selectQuiz = (quizNo) => {\n    setQuiz(quizNo);\n  }\n\n  const toggleAnswers = () => {\n    setAnswersVisible(!answersVisible);\n  }\n\n  // --------------------------------------\n  const addNewQuestion= (quizIndex) => {\n    console.log(\"add new\")\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    let newQuestion= {question: \"\", answerOptions: [ {answer: \"\", correct: \"\", selected: \"\"}] }\n    deepCopy[quizIndex].quizQuestions.push(newQuestion) \n    setData(deepCopy)\n  }\n\n  const addNewAnswer= (quizIndex) => {\n    quizIndex = 0;\n    console.log(\"add new\")\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    let newQuestion= {question: \"\", answerOptions: [ {answer: \"\", correct: \"\", selected: \"\"}] }\n    deepCopy[quizIndex].quizQuestions.push(newQuestion) \n    setData(deepCopy)\n  }\n\n  const answerChanged = () => {\n    console.log(\"answerChanged\")\n  }\n\n  const deleteAnswer = () => {\n    console.log(\"answer deleted\")\n  }\n  // --------------------------------------\n\n  const [status, setStatus] = React.useState({\n    teacherMode: true,\n  });\n\n  const handleChange = (event) => {\n    setStatus({ ...status, [event.target.name]: event.target.checked });\n  };\n\n  return (\n    <div>\n      <ButtonAppBar/>\n      <Container className=\"quizContainer\">\n        <div className={classes.root}>\n        <FormControlLabel\n        control={\n          <Switch\n          checked={status.teacherMode}\n          onChange={handleChange}\n          name=\"teacherMode\"\n          inputProps={{ 'aria-label': 'secondary checkbox' }}\n        />\n        }\n        label=\"Teacher mode\"/><br/>\n        {data.map((val, index) => {\n          return (\n            <Button variant=\"outlined\" onClick={() => selectQuiz(index)}>{val.quizName}</Button>\n          )\n        })}\n        </div>\n            {dataAlustettu ? data[quiz].quizQuestions.map((value, parentIndex) => {\n              return(\n                <div className=\"questionCard\">\n                <Paper elevation={1}>\n                <List className={classes.root}>\n                <p className=\"question\">{value.question}</p>\n                {value.answerOptions.map((value, index) => {\n                  return(\n                  <ListItem key={index} role={undefined} dense >\n                   { answersVisible ? <ListItemIcon>\n                      <Checkbox\n                        onChange={(event) => handleToggle(event, index, parentIndex)}\n                        checked={value.correct}\n                        edge=\"start\"\n                        tabIndex={-1}\n                        hidden={answersVisible}\n                        disabled\n                      />\n                    </ListItemIcon> : null }\n                    <ListItemIcon>\n                      <Checkbox\n                        onChange={(event) => handleToggle(event, index, parentIndex)}\n                        checked={value.selected}\n                        edge=\"start\"\n                        tabIndex={-1}\n                      />\n                    </ListItemIcon>\n                    {status.teacherMode ?  \n                      <div>\n                        <TextField id=\"outlined-basic\" onChange={answerChanged} size=\"small\" label={\"Answer \" + (index+1)} variant=\"outlined\" value={value.answer}/>\n                        <Button className=\"deleteButton\" onClick={deleteAnswer}>Delete</Button> \n                      </div>\n                      :  <ListItemText id={index} primary={value.answer} />\n                    }\n                  </ListItem>\n                  )\n                })}\n                {status.teacherMode ? <Button className=\"addButton\" onClick={addNewAnswer}>Add new answer</Button> : \"\"}\n\n                </List>\n                </Paper>\n                </div>\n              );\n            }): \"\" }<p>\n            </p>\n            <div className=\"bottomButtons\">\n              <Button variant=\"contained\" onClick={() => toggleAnswers()}>{answersVisible ? \"Hide answers\" : \"Show answers\"}</Button> <br />\n            </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}