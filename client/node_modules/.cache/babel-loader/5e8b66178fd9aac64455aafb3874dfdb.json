{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\vappu\\\\Documents\\\\ReactKansio\\\\quiz-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport ButtonAppBar from './ButtonAppBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport quizzesImported from './Quizzes';\nimport uuid from 'react-uuid';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport AddIcon from '@material-ui/icons/Add';\nimport CheckIcon from '@material-ui/icons/Check';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport { Container, Paper, Button, Switch, FormControlLabel, TextField } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  }\n}));\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    '&$checked': {\n      color: green[600]\n    }\n  },\n  checked: {}\n})(props => /*#__PURE__*/_jsxDEV(Checkbox, {\n  color: \"default\",\n  ...props\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 40,\n  columnNumber: 15\n}, this));\n\nfunction App() {\n  _s();\n\n  const initialData = [...quizzesImported].map(quizObject => {\n    quizObject.uuid = uuid();\n    quizObject.quizQuestions.map(questionObject => {\n      console.log(questionObject);\n      questionObject.uuid = uuid();\n      return questionObject;\n    });\n    return quizObject;\n  });\n  const classes = useStyles();\n  const [data, setData] = useState([]);\n  const [dataAlustettu, setDataAlustettu] = useState(false);\n  const [quiz, setQuiz] = useState(0);\n  const [answersVisible, setAnswersVisible] = useState(false);\n  useEffect(() => {\n    let jemma = window.localStorage;\n    let tempData = JSON.parse(jemma.getItem(\"data\"));\n\n    if (tempData == null) {\n      jemma.setItem(\"data\", JSON.stringify(initialData));\n      tempData = initialData;\n    }\n\n    setData(tempData);\n    setDataAlustettu(true);\n  }, []);\n  useEffect(() => {\n    if (dataAlustettu) {\n      window.localStorage.setItem(\"data\", JSON.stringify(data));\n    }\n  }, [data]);\n\n  const handleToggle = (event, index, parentIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected = !deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected;\n    setData(deepCopy);\n  };\n\n  const handleCorrectToggle = (event, index, parentIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].correct = !deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].correct;\n    setData(deepCopy);\n  };\n\n  const selectQuiz = quizNo => {\n    setQuiz(quizNo);\n  };\n\n  const toggleAnswers = () => {\n    setAnswersVisible(!answersVisible);\n  }; // --------------------------------------\n\n\n  const addQuiz = () => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    let newQuiz = {\n      quizName: \"New Quiz\",\n      uuid: uuid(),\n      quizQuestions: [{\n        question: \"\",\n        answerOptions: [{\n          answer: \"\",\n          correct: false,\n          selected: false,\n          uuid: uuid()\n        }],\n        uuid: uuid()\n      }]\n    };\n    deepCopy.push(newQuiz);\n    setData(deepCopy);\n  };\n\n  const addNewQuestion = quizIndex => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    let newQuestion = {\n      question: \"\",\n      answerOptions: [{\n        answer: \"\",\n        correct: false,\n        selected: false,\n        uuid: uuid()\n      }],\n      uuid: uuid()\n    };\n    deepCopy[quizIndex].quizQuestions.push(newQuestion);\n    setData(deepCopy);\n  };\n\n  const addNewAnswer = (quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    let newAnswer = {\n      answer: \"\",\n      correct: false,\n      selected: false,\n      uuid: uuid()\n    };\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.push(newAnswer);\n    setData(deepCopy);\n  };\n\n  const questionChanged = (event, quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quizIndex].quizQuestions[questionIndex].question = event.target.value;\n    setData(deepCopy);\n  };\n\n  const answerChanged = (event, quizIndex, questionIndex, answerIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions[answerIndex].answer = event.target.value;\n    setData(deepCopy);\n  };\n\n  const deleteQuestion = (quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quizIndex].quizQuestions.splice(questionIndex, 1);\n    setData(deepCopy);\n  };\n\n  const deleteAnswer = (quizIndex, questionIndex, answerIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.splice(answerIndex, 1);\n    setData(deepCopy);\n  }; // --------------------------------------\n\n\n  const [status, setStatus] = React.useState({\n    teacherMode: true\n  });\n\n  const handleChange = event => {\n    setStatus({ ...status,\n      [event.target.name]: event.target.checked\n    });\n  }; // BENVENUTO AL RISTORANTE DI \n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ButtonAppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"quizContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Switch, {\n            checked: status.teacherMode,\n            onChange: handleChange,\n            name: \"teacherMode\",\n            inputProps: {\n              'aria-label': 'secondary checkbox'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 11\n          }, this),\n          label: \"Teacher mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 31\n        }, this), data.map((val, index) => {\n          return /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: () => selectQuiz(index),\n            children: val.quizName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this);\n        }), status.teacherMode ? /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => addQuiz(),\n          children: /*#__PURE__*/_jsxDEV(AddCircleIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 65\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 31\n        }, this) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), dataAlustettu ? data[quiz].quizQuestions.map((value, parentIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"questionCard\",\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 1,\n            children: /*#__PURE__*/_jsxDEV(List, {\n              className: classes.root,\n              children: [status.teacherMode ? /*#__PURE__*/_jsxDEV(ListItem, {\n                role: undefined,\n                dense: true,\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  onChange: event => questionChanged(event, quiz, parentIndex),\n                  size: \"small\",\n                  label: \"Question \" + (parentIndex + 1),\n                  variant: \"outlined\",\n                  value: value.question\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"deleteButton\",\n                  onClick: () => deleteQuestion(quiz, parentIndex),\n                  children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 186,\n                    columnNumber: 102\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 19\n                }, this)]\n              }, value.uuid, true, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"question\",\n                children: value.question\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 19\n              }, this), value.answerOptions.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(ListItem, {\n                  role: undefined,\n                  dense: true,\n                  children: [answersVisible || status.teacherMode ? /*#__PURE__*/_jsxDEV(ListItemIcon, {\n                    children: /*#__PURE__*/_jsxDEV(GreenCheckbox, {\n                      onChange: event => handleCorrectToggle(event, index, parentIndex),\n                      checked: value.correct,\n                      edge: \"start\",\n                      tabIndex: -1,\n                      hidden: answersVisible,\n                      disabled: !status.teacherMode\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 193,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 192,\n                    columnNumber: 61\n                  }, this) : null, /*#__PURE__*/_jsxDEV(ListItemIcon, {\n                    children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      onChange: event => handleToggle(event, index, parentIndex),\n                      checked: value.selected,\n                      edge: \"start\",\n                      tabIndex: -1\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 203,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 202,\n                    columnNumber: 21\n                  }, this), status.teacherMode ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(TextField, {\n                      onChange: event => answerChanged(event, quiz, parentIndex, index),\n                      size: \"small\",\n                      label: \"Answer \" + (index + 1),\n                      variant: \"outlined\",\n                      value: value.answer\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 212,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"deleteButton\",\n                      onClick: () => deleteAnswer(quiz, parentIndex, index),\n                      children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 213,\n                        columnNumber: 113\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 213,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 211,\n                    columnNumber: 23\n                  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                      id: index,\n                      primary: value.answer\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 215,\n                      columnNumber: 30\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 215,\n                    columnNumber: 25\n                  }, this)]\n                }, value.uuid, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 19\n                }, this);\n              }), status.teacherMode ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"addButton\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: () => addNewAnswer(quiz, parentIndex),\n                  children: /*#__PURE__*/_jsxDEV(AddCircleIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 220,\n                    columnNumber: 122\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 66\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 39\n              }, this) : \"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }, this);\n      }) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottomButtons\",\n        children: status.teacherMode ? /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => addNewQuestion(quiz),\n          children: [/*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 99\n          }, this), \"   Add new question\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 35\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => toggleAnswers(),\n          children: answersVisible ? \"Hide correct answers\" : \"Show correct answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"u4MBdbmU1Usbi7gB3P07wuWz96w=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/vappu/Documents/ReactKansio/quiz-app/src/App.js"],"names":["React","useEffect","useState","ButtonAppBar","makeStyles","List","ListItem","ListItemIcon","ListItemText","Checkbox","quizzesImported","uuid","DeleteIcon","AddCircleIcon","AddIcon","CheckIcon","withStyles","green","Container","Paper","Button","Switch","FormControlLabel","TextField","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","margin","spacing","GreenCheckbox","color","checked","props","App","initialData","map","quizObject","quizQuestions","questionObject","console","log","classes","data","setData","dataAlustettu","setDataAlustettu","quiz","setQuiz","answersVisible","setAnswersVisible","jemma","window","localStorage","tempData","JSON","parse","getItem","setItem","stringify","handleToggle","event","index","parentIndex","deepCopy","answerOptions","selected","handleCorrectToggle","correct","selectQuiz","quizNo","toggleAnswers","addQuiz","newQuiz","quizName","question","answer","push","addNewQuestion","quizIndex","newQuestion","addNewAnswer","questionIndex","newAnswer","questionChanged","target","value","answerChanged","answerIndex","deleteQuestion","splice","deleteAnswer","status","setStatus","teacherMode","handleChange","name","val","undefined"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport ButtonAppBar from './ButtonAppBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport quizzesImported from './Quizzes'\nimport uuid from 'react-uuid'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport AddIcon from '@material-ui/icons/Add';\nimport CheckIcon from '@material-ui/icons/Check';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\n\nimport {Container, Paper, Button, Switch, FormControlLabel, TextField} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    '&$checked': {\n      color: green[600],\n    },\n  },\n  checked: {},\n})((props) => <Checkbox color=\"default\" {...props} />);\n\n\nfunction App() {\n  const initialData = [...quizzesImported].map((quizObject) => {\n    quizObject.uuid = uuid();\n    quizObject.quizQuestions.map((questionObject) => {\n      console.log(questionObject)\n      questionObject.uuid = uuid();\n      return questionObject\n    })\n    return quizObject\n  });\n\n  const classes = useStyles();\n  const [data, setData] = useState([])\n  const [dataAlustettu, setDataAlustettu] = useState(false)\n  const [quiz, setQuiz] = useState(0);\n  const [answersVisible, setAnswersVisible] = useState(false)\n\n  useEffect(() => {\n    let jemma = window.localStorage;\n    let tempData = JSON.parse(jemma.getItem(\"data\"))\n    if (tempData == null) {\n      jemma.setItem(\"data\", JSON.stringify(initialData))\n      tempData = initialData\n    } \n    setData(tempData);\n    setDataAlustettu(true)\n  }, [])\n\n  useEffect(() => {\n    if (dataAlustettu) {\n      window.localStorage.setItem(\"data\", JSON.stringify(data))\n    }\n  }, [data])\n\n  const handleToggle = (event, index, parentIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected = !deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected;\n    setData(deepCopy)\n  };\n\n  const handleCorrectToggle = (event, index, parentIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].correct = !deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].correct;\n    setData(deepCopy)\n  };\n  \n  const selectQuiz = (quizNo) => {\n    setQuiz(quizNo);\n  }\n\n  const toggleAnswers = () => {\n    setAnswersVisible(!answersVisible);\n  }\n\n  // --------------------------------------\n\n  const addQuiz= () => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    let newQuiz= {quizName: \"New Quiz\", uuid:uuid(), quizQuestions: [{question: \"\", answerOptions: [ {answer: \"\", correct: false, selected: false,uuid: uuid()}], uuid: uuid() }]}\n    deepCopy.push(newQuiz) \n    setData(deepCopy)\n  }\n\n  const addNewQuestion= (quizIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    let newQuestion= {question: \"\", answerOptions: [ {answer: \"\", correct: false, selected: false,uuid: uuid()}], uuid: uuid() }\n    deepCopy[quizIndex].quizQuestions.push(newQuestion) \n    setData(deepCopy)\n  }\n\n  const addNewAnswer= (quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    let newAnswer= {answer: \"\", correct: false, selected: false, uuid: uuid()}\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.push(newAnswer) \n    setData(deepCopy)\n  }\n\n  const questionChanged = (event, quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quizIndex].quizQuestions[questionIndex].question = event.target.value;\n    setData(deepCopy)\n  }\n\n  const answerChanged = (event, quizIndex, questionIndex, answerIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions[answerIndex].answer = event.target.value;\n    setData(deepCopy)\n  }\n\n  const deleteQuestion = (quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quizIndex].quizQuestions.splice(questionIndex,1)\n    setData(deepCopy)\n  }\n\n  const deleteAnswer = (quizIndex, questionIndex, answerIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.splice(answerIndex,1)\n    setData(deepCopy)\n  }\n\n  // --------------------------------------\n\n  const [status, setStatus] = React.useState({\n    teacherMode: true,\n  });\n\n  const handleChange = (event) => {\n    setStatus({ ...status, [event.target.name]: event.target.checked });\n  };\n\n  // BENVENUTO AL RISTORANTE DI \n\n  return (\n    <div>\n      <ButtonAppBar/>\n      <Container className=\"quizContainer\">\n        <div className={classes.root}>\n        <FormControlLabel\n        control={\n          <Switch\n          checked={status.teacherMode}\n          onChange={handleChange}\n          name=\"teacherMode\"\n          inputProps={{ 'aria-label': 'secondary checkbox' }}\n        />\n        }\n        label=\"Teacher mode\"/><br/>\n        {data.map((val, index) => {\n          return (\n            <Button variant=\"outlined\" onClick={() => selectQuiz(index)}>{val.quizName}</Button>\n          )\n        })}\n        {status.teacherMode ? <Button onClick={() => addQuiz()}><AddCircleIcon/></Button> : \"\"}\n        </div>\n            {dataAlustettu ? data[quiz].quizQuestions.map((value, parentIndex) => {\n              return(\n                <div className=\"questionCard\">\n                <Paper elevation={1}>\n                <List className={classes.root}>\n                {status.teacherMode ?  \n                  <ListItem key={value.uuid} role={undefined} dense >\n                  <TextField fullWidth onChange={(event) => questionChanged(event, quiz, parentIndex)} size=\"small\" label={\"Question \" + (parentIndex+1)} variant=\"outlined\" value={value.question}/> \n                  <Button className=\"deleteButton\" onClick={() => deleteQuestion(quiz, parentIndex)}><DeleteIcon/></Button>\n                 </ListItem>\n                : <div className=\"question\">{value.question}</div>}\n                {value.answerOptions.map((value, index) => {\n                  return(\n                  <ListItem key={value.uuid} role={undefined} dense >\n                   { answersVisible || status.teacherMode ? <ListItemIcon>\n                      <GreenCheckbox\n                        onChange={(event) => handleCorrectToggle(event, index, parentIndex)}\n                        checked={value.correct}\n                        edge=\"start\"\n                        tabIndex={-1}\n                        hidden={answersVisible}\n                        disabled={!status.teacherMode}\n                      />\n                    </ListItemIcon> : null }\n                    <ListItemIcon>\n                      <Checkbox\n                        onChange={(event) => handleToggle(event, index, parentIndex)}\n                        checked={value.selected}\n                        edge=\"start\"\n                        tabIndex={-1}\n                      />\n                    </ListItemIcon>\n                    {status.teacherMode ?  \n                      <div>\n                        <TextField onChange={(event) => answerChanged(event, quiz, parentIndex, index)} size=\"small\" label={\"Answer \" + (index+1)} variant=\"outlined\" value={value.answer}/>\n                        <Button className=\"deleteButton\" onClick={() => deleteAnswer(quiz, parentIndex, index)}><DeleteIcon/></Button> \n                      </div>\n                      : <div><ListItemText id={index} primary={value.answer} /></div>\n                    }\n                  </ListItem>\n                  )\n                })}\n                {status.teacherMode ? <div className=\"addButton\"><Button onClick={() => addNewAnswer(quiz, parentIndex)}><AddCircleIcon/></Button></div> : \"\"}\n                </List>\n                </Paper>\n                </div>\n              );\n            }): \"\" }\n            <div className=\"bottomButtons\">\n            {status.teacherMode ? <Button variant=\"contained\" onClick={() =>addNewQuestion(quiz)}><AddIcon/>   Add new question</Button> : \n            <Button variant=\"contained\" onClick={() => toggleAnswers()}>{answersVisible ? \"Hide correct answers\" : \"Show correct answers\"}</Button> \n            }</div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}