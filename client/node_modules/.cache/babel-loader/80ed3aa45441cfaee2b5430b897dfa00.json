{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\vappu\\\\Documents\\\\ReactKansio\\\\quiz-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport ButtonAppBar from './ButtonAppBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport quizzesImported from './Quizzes';\nimport uuid from 'react-uuid';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport AddIcon from '@material-ui/icons/Add';\nimport CheckIcon from '@material-ui/icons/Check';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport { Container, Paper, Button, Switch, FormControlLabel, TextField } from '@material-ui/core';\nimport axios from 'axios';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  }\n}));\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    '&$checked': {\n      color: green[600]\n    }\n  },\n  checked: {}\n})(props => /*#__PURE__*/_jsxDEV(Checkbox, {\n  color: \"default\",\n  ...props\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 42,\n  columnNumber: 15\n}, this));\n\nfunction App() {\n  _s();\n\n  const classes = useStyles();\n  const [data, setData] = useState([]);\n  const [dataAlustettu, setDataAlustettu] = useState(false);\n  const [quiz, setQuiz] = useState(0);\n  const [answersVisible, setAnswersVisible] = useState(false);\n  useEffect(() => {\n    const createData = async () => {\n      try {\n        let result = await axios.post(\"http://localhost:3005/quizzes\", initialData);\n        setData(initialData);\n        setDataAlustettu(true);\n      } catch (exception) {\n        alert(\"Tietokannan alustaminen ep채onnistui\");\n      }\n    };\n\n    const fetchData = async () => {\n      try {\n        let result = await axios.get(\"http://localhost:3005/quizzes\");\n\n        if (result.data.length > 0) {\n          setData(result.data);\n          setDataAlustettu(true);\n        } else {\n          throw \"Nyt pit채채 data kyll채 alustaa!\";\n        }\n      } catch (exception) {\n        createData();\n        console.log(exception);\n      }\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const updateData = async () => {\n      try {\n        let result = await axios.put(\"http://localhost:3005/quizzes\", data);\n      } catch (exception) {\n        console.log(exception);\n      }\n    };\n\n    if (dataAlustettu) {\n      updateData();\n    }\n  }, [data]); // useEffect(() => {\n  //   let jemma = window.localStorage;\n  //   let tempData = JSON.parse(jemma.getItem(\"data\"))\n  //   if (tempData == null) {\n  //     jemma.setItem(\"data\", JSON.stringify(initialData))\n  //     tempData = initialData\n  //   } \n  //   setData(tempData);\n  //   setDataAlustettu(true)\n  // }, [])\n  // useEffect(() => {\n  //   if (dataAlustettu) {\n  //     window.localStorage.setItem(\"data\", JSON.stringify(data))\n  //   }\n  // }, [data])\n\n  const handleToggle = (event, index, parentIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected = !deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected;\n    setData(deepCopy);\n  };\n\n  const handleCorrectToggle = (event, index, parentIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].correct = !deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].correct;\n    setData(deepCopy);\n  };\n\n  const selectQuiz = quizNo => {\n    setQuiz(quizNo);\n  };\n\n  const toggleAnswers = () => {\n    setAnswersVisible(!answersVisible);\n  }; // --------------------------------------\n\n\n  const addQuiz = () => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    let newQuiz = {\n      quizName: \"New Quiz\",\n      uuid: uuid(),\n      quizQuestions: [{\n        question: \"\",\n        answerOptions: [{\n          answer: \"\",\n          correct: false,\n          selected: false,\n          uuid: uuid()\n        }],\n        uuid: uuid()\n      }]\n    };\n    deepCopy.push(newQuiz);\n    setData(deepCopy);\n  };\n\n  const addNewQuestion = quizIndex => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    let newQuestion = {\n      question: \"\",\n      answerOptions: [{\n        answer: \"\",\n        correct: false,\n        selected: false,\n        uuid: uuid()\n      }],\n      uuid: uuid()\n    };\n    deepCopy[quizIndex].quizQuestions.push(newQuestion);\n    setData(deepCopy);\n  };\n\n  const addNewAnswer = (quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    let newAnswer = {\n      answer: \"\",\n      correct: false,\n      selected: false,\n      uuid: uuid()\n    };\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.push(newAnswer);\n    setData(deepCopy);\n  };\n\n  const questionChanged = (event, quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quizIndex].quizQuestions[questionIndex].question = event.target.value;\n    setData(deepCopy);\n  };\n\n  const answerChanged = (event, quizIndex, questionIndex, answerIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions[answerIndex].answer = event.target.value;\n    setData(deepCopy);\n  };\n\n  const deleteQuestion = (quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quizIndex].quizQuestions.splice(questionIndex, 1);\n    setData(deepCopy);\n  };\n\n  const deleteAnswer = (quizIndex, questionIndex, answerIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.splice(answerIndex, 1);\n    setData(deepCopy);\n  }; // --------------------------------------\n\n\n  const [status, setStatus] = React.useState({\n    teacherMode: true\n  });\n\n  const handleChange = event => {\n    setStatus({ ...status,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ButtonAppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"quizContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Switch, {\n            checked: status.teacherMode,\n            onChange: handleChange,\n            name: \"teacherMode\",\n            inputProps: {\n              'aria-label': 'secondary checkbox'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 11\n          }, this),\n          label: \"Teacher mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"u4MBdbmU1Usbi7gB3P07wuWz96w=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/vappu/Documents/ReactKansio/quiz-app/src/App.js"],"names":["React","useEffect","useState","ButtonAppBar","makeStyles","List","ListItem","ListItemIcon","ListItemText","Checkbox","quizzesImported","uuid","DeleteIcon","AddCircleIcon","AddIcon","CheckIcon","withStyles","green","Container","Paper","Button","Switch","FormControlLabel","TextField","axios","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","margin","spacing","GreenCheckbox","color","checked","props","App","classes","data","setData","dataAlustettu","setDataAlustettu","quiz","setQuiz","answersVisible","setAnswersVisible","createData","result","post","initialData","exception","alert","fetchData","get","length","console","log","updateData","put","handleToggle","event","index","parentIndex","deepCopy","JSON","parse","stringify","quizQuestions","answerOptions","selected","handleCorrectToggle","correct","selectQuiz","quizNo","toggleAnswers","addQuiz","newQuiz","quizName","question","answer","push","addNewQuestion","quizIndex","newQuestion","addNewAnswer","questionIndex","newAnswer","questionChanged","target","value","answerChanged","answerIndex","deleteQuestion","splice","deleteAnswer","status","setStatus","teacherMode","handleChange","name"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport ButtonAppBar from './ButtonAppBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport quizzesImported from './Quizzes'\nimport uuid from 'react-uuid'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport AddIcon from '@material-ui/icons/Add';\nimport CheckIcon from '@material-ui/icons/Check';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\n\n\nimport {Container, Paper, Button, Switch, FormControlLabel, TextField} from '@material-ui/core';\nimport axios from 'axios';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    '&$checked': {\n      color: green[600],\n    },\n  },\n  checked: {},\n})((props) => <Checkbox color=\"default\" {...props} />);\n\n\nfunction App() {\n\n\n  const classes = useStyles();\n  const [data, setData] = useState([])\n  const [dataAlustettu, setDataAlustettu] = useState(false)\n  const [quiz, setQuiz] = useState(0);\n  const [answersVisible, setAnswersVisible] = useState(false)\n\n\n  useEffect(() => {\n\n    const createData = async() => {\n      \n      try {\n\n        let result = await axios.post(\"http://localhost:3005/quizzes\", initialData)\n        setData(initialData)\n        setDataAlustettu(true)\n\n      } catch (exception) {\n        alert(\"Tietokannan alustaminen ep채onnistui\")\n      }\n    }\n\n    const fetchData = async () => {\n      try {\n        let result = await axios.get(\"http://localhost:3005/quizzes\")\n        if (result.data.length > 0) {\n          setData(result.data);\n          setDataAlustettu(true)\n        } else {\n          throw (\"Nyt pit채채 data kyll채 alustaa!\")\n        }\n      }\n      catch (exception) {\n        createData();\n        console.log(exception)\n      }\n    }\n    fetchData();\n  }, [])\n\n  useEffect(() => {\n    const updateData = async () => {\n      try {\n        let result = await axios.put(\"http://localhost:3005/quizzes\", data)\n      } catch (exception) {\n        console.log(exception)\n      }\n    }\n  \n    if (dataAlustettu) {\n      updateData();\n    }\n  }, [data])\n\n  // useEffect(() => {\n  //   let jemma = window.localStorage;\n  //   let tempData = JSON.parse(jemma.getItem(\"data\"))\n  //   if (tempData == null) {\n  //     jemma.setItem(\"data\", JSON.stringify(initialData))\n  //     tempData = initialData\n  //   } \n  //   setData(tempData);\n  //   setDataAlustettu(true)\n  // }, [])\n\n  // useEffect(() => {\n  //   if (dataAlustettu) {\n  //     window.localStorage.setItem(\"data\", JSON.stringify(data))\n  //   }\n  // }, [data])\n\n  const handleToggle = (event, index, parentIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected = !deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected;\n    setData(deepCopy)\n  };\n\n  const handleCorrectToggle = (event, index, parentIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].correct = !deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].correct;\n    setData(deepCopy)\n  };\n  \n  const selectQuiz = (quizNo) => {\n    setQuiz(quizNo);\n  }\n\n  const toggleAnswers = () => {\n    setAnswersVisible(!answersVisible);\n  }\n\n  // --------------------------------------\n\n  const addQuiz= () => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    let newQuiz= {quizName: \"New Quiz\", uuid:uuid(), quizQuestions: [{question: \"\", answerOptions: [ {answer: \"\", correct: false, selected: false,uuid: uuid()}], uuid: uuid() }]}\n    deepCopy.push(newQuiz) \n    setData(deepCopy)\n  }\n\n  const addNewQuestion= (quizIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    let newQuestion= {question: \"\", answerOptions: [ {answer: \"\", correct: false, selected: false,uuid: uuid()}], uuid: uuid() }\n    deepCopy[quizIndex].quizQuestions.push(newQuestion) \n    setData(deepCopy)\n  }\n\n  const addNewAnswer= (quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    let newAnswer= {answer: \"\", correct: false, selected: false, uuid: uuid()}\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.push(newAnswer) \n    setData(deepCopy)\n  }\n\n  const questionChanged = (event, quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quizIndex].quizQuestions[questionIndex].question = event.target.value;\n    setData(deepCopy)\n  }\n\n  const answerChanged = (event, quizIndex, questionIndex, answerIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions[answerIndex].answer = event.target.value;\n    setData(deepCopy)\n  }\n\n  const deleteQuestion = (quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quizIndex].quizQuestions.splice(questionIndex,1)\n    setData(deepCopy)\n  }\n\n  const deleteAnswer = (quizIndex, questionIndex, answerIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.splice(answerIndex,1)\n    setData(deepCopy)\n  }\n\n  // --------------------------------------\n\n  const [status, setStatus] = React.useState({\n    teacherMode: true,\n  });\n\n  const handleChange = (event) => {\n    setStatus({ ...status, [event.target.name]: event.target.checked });\n  };\n\n  return (\n    <div>\n      <ButtonAppBar/>\n      <Container className=\"quizContainer\">\n        <div className={classes.root}>\n        <FormControlLabel\n        control={\n          <Switch\n          checked={status.teacherMode}\n          onChange={handleChange}\n          name=\"teacherMode\"\n          inputProps={{ 'aria-label': 'secondary checkbox' }}\n        />\n        }\n        label=\"Teacher mode\"/><br/>\n        {/* {data ? data.map((val, index) => {\n          return (\n            <Button variant=\"outlined\" onClick={() => selectQuiz(index)}>{val.quizName}</Button>\n          )\n        }) : null}\n        {status.teacherMode ? <Button onClick={() => addQuiz()}><AddCircleIcon/></Button> : \"\"}\n        </div>\n            {dataAlustettu ? data[quiz].quizQuestions.map((value, parentIndex) => {\n              return(\n                <div className=\"questionCard\">\n                <Paper elevation={1}>\n                <List className={classes.root}>\n                {status.teacherMode ?  \n                  <ListItem key={value.uuid} role={undefined} dense >\n                  <TextField fullWidth onChange={(event) => questionChanged(event, quiz, parentIndex)} size=\"small\" label={\"Question \" + (parentIndex+1)} variant=\"outlined\" value={value.question}/> \n                  <Button className=\"deleteButton\" onClick={() => deleteQuestion(quiz, parentIndex)}><DeleteIcon/></Button>\n                 </ListItem>\n                : <div className=\"question\">{value.question}</div>}\n                {value.answerOptions.map((value, index) => {\n                  return(\n                  <ListItem key={value.uuid} role={undefined} dense >\n                   { answersVisible || status.teacherMode ? <ListItemIcon>\n                      <GreenCheckbox\n                        onChange={(event) => handleCorrectToggle(event, index, parentIndex)}\n                        checked={value.correct}\n                        edge=\"start\"\n                        tabIndex={-1}\n                        hidden={answersVisible}\n                        disabled={!status.teacherMode}\n                      />\n                    </ListItemIcon> : null }\n                    <ListItemIcon>\n                      <Checkbox\n                        onChange={(event) => handleToggle(event, index, parentIndex)}\n                        checked={value.selected}\n                        edge=\"start\"\n                        tabIndex={-1}\n                      />\n                    </ListItemIcon>\n                    {status.teacherMode ?  \n                      <div>\n                        <TextField onChange={(event) => answerChanged(event, quiz, parentIndex, index)} size=\"small\" label={\"Answer \" + (index+1)} variant=\"outlined\" value={value.answer}/>\n                        <Button className=\"deleteButton\" onClick={() => deleteAnswer(quiz, parentIndex, index)}><DeleteIcon/></Button> \n                      </div>\n                      : <div><ListItemText id={index} primary={value.answer} /></div>\n                    }\n                  </ListItem>\n                  )\n                })}\n                {status.teacherMode ? <div className=\"addButton\"><Button onClick={() => addNewAnswer(quiz, parentIndex)}><AddCircleIcon/></Button></div> : \"\"}\n                </List>\n                </Paper>\n                </div>\n              );\n            }): \"\" }\n            <div className=\"bottomButtons\">\n            {status.teacherMode ? <Button variant=\"contained\" onClick={() =>addNewQuestion(quiz)}><AddIcon/>   Add new question</Button> : \n            <Button variant=\"contained\" onClick={() => toggleAnswers()}>{answersVisible ? \"Hide correct answers\" : \"Show correct answers\"}</Button> \n            }</div> */}    \n            </div>\n\n      </Container>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}