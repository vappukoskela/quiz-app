{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\vappu\\\\Documents\\\\ReactKansio\\\\quiz-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport ButtonAppBar from './ButtonAppBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport quizzesImported from './Quizzes';\nimport uuid from 'react-uuid';\nimport { Container, Paper, Button, Switch, FormControlLabel, TextField } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  }\n}));\n\nfunction App() {\n  _s();\n\n  const quizzesKeyed = [...quizzesImported].map((quiz, index) => {\n    quiz.uuid = uuid();\n    console.log(quiz);\n    quiz.quizQuestions.map((quizQuestions, index) => {\n      quizQuestions.uuid = uuid();\n      quizQuestions.answerOptions.map((quizAnswers, index) => {\n        quizAnswers.uui = uuid();\n      });\n    });\n    return quiz;\n  });\n  const initialData = quizzesKeyed;\n  console.log(initialData);\n  const classes = useStyles();\n  const [data, setData] = useState([]);\n  const [dataAlustettu, setDataAlustettu] = useState(false);\n  const [quiz, setQuiz] = useState(0);\n  const [answersVisible, setAnswersVisible] = useState(false);\n  const [isTeacherView, setIsTeacherView] = useState(false);\n  useEffect(() => {\n    let jemma = window.localStorage;\n    let tempData = JSON.parse(jemma.getItem(\"data\"));\n\n    if (tempData == null) {\n      jemma.setItem(\"data\", JSON.stringify(initialData));\n      tempData = initialData;\n    }\n\n    setData(tempData);\n    setDataAlustettu(true);\n  }, []);\n  useEffect(() => {\n    if (dataAlustettu) {\n      window.localStorage.setItem(\"data\", JSON.stringify(data));\n    }\n  }, [data]);\n\n  const handleToggle = (event, index, parentIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected = !deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected;\n    setData(deepCopy);\n  };\n\n  const selectQuiz = quizNo => {\n    setQuiz(quizNo);\n  };\n\n  const toggleAnswers = () => {\n    setAnswersVisible(!answersVisible);\n  }; // --------------------------------------\n\n\n  const addNewQuestion = quizIndex => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    let newQuestion = {\n      question: \"\",\n      answerOptions: [{\n        answer: \"\",\n        correct: false,\n        selected: false\n      }]\n    };\n    deepCopy[quizIndex].quizQuestions.push(newQuestion);\n    setData(deepCopy);\n  };\n\n  const addNewAnswer = (quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    let newAnswer = {\n      answer: \"\",\n      correct: false,\n      selected: false\n    };\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.push(newAnswer);\n    setData(deepCopy);\n  };\n\n  const questionChanged = (event, quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quizIndex].quizQuestions[questionIndex].question = event.target.value;\n    setData(deepCopy);\n  };\n\n  const answerChanged = (event, quizIndex, questionIndex, answerIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions[answerIndex] = event.target.value;\n    setData(deepCopy);\n  };\n\n  const deleteQuestion = (quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quizIndex].quizQuestions.splice(questionIndex, 1);\n    setData(deepCopy);\n  };\n\n  const deleteAnswer = (quizIndex, questionIndex, answerIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.splice(answerIndex, 1);\n    setData(deepCopy);\n  }; // --------------------------------------\n\n\n  const [status, setStatus] = React.useState({\n    teacherMode: true\n  });\n\n  const handleChange = event => {\n    setStatus({ ...status,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ButtonAppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"quizContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Switch, {\n            checked: status.teacherMode,\n            onChange: handleChange,\n            name: \"teacherMode\",\n            inputProps: {\n              'aria-label': 'secondary checkbox'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 11\n          }, this),\n          label: \"Teacher mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 31\n        }, this), dataAlustettu ? data.map((val, index) => {\n          return /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: () => selectQuiz(index),\n            children: val.quizName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this);\n        }) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), dataAlustettu ? data[quiz].quizQuestions.map((value, parentIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"questionCard\",\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 1,\n            children: /*#__PURE__*/_jsxDEV(List, {\n              className: classes.root,\n              children: [status.teacherMode ? /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"question\",\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  id: \"outlined-basic\",\n                  onChange: event => questionChanged(event, quiz, parentIndex),\n                  size: \"small\",\n                  label: \"Question \" + (parentIndex + 1),\n                  variant: \"outlined\",\n                  value: value.question\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"deleteButton\",\n                  onClick: () => deleteQuestion(quiz, parentIndex),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 17\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 40\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"question\",\n                children: value.question\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 19\n              }, this), value.answerOptions.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(ListItem, {\n                  role: undefined,\n                  dense: true,\n                  children: [answersVisible ? /*#__PURE__*/_jsxDEV(ListItemIcon, {\n                    children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      onChange: event => handleToggle(event, index, parentIndex),\n                      checked: value.correct,\n                      edge: \"start\",\n                      tabIndex: -1,\n                      hidden: answersVisible,\n                      disabled: !status.teacherMode\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 164,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 163,\n                    columnNumber: 39\n                  }, this) : null, /*#__PURE__*/_jsxDEV(ListItemIcon, {\n                    children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      onChange: event => handleToggle(event, index, parentIndex),\n                      checked: value.selected,\n                      edge: \"start\",\n                      tabIndex: -1\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 174,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 173,\n                    columnNumber: 21\n                  }, this), status.teacherMode ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(TextField, {\n                      id: \"outlined-basic\",\n                      onChange: event => answerChanged(event, quiz, parentIndex, index),\n                      size: \"small\",\n                      label: \"Answer \" + (index + 1),\n                      variant: \"outlined\",\n                      value: value.answer\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 183,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"deleteButton\",\n                      onClick: () => deleteAnswer(quiz, parentIndex, index),\n                      children: \"Delete\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 184,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 182,\n                    columnNumber: 23\n                  }, this) : /*#__PURE__*/_jsxDEV(ListItemText, {\n                    id: index,\n                    primary: value.answer\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 186,\n                    columnNumber: 26\n                  }, this)]\n                }, value.uuid, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 19\n                }, this);\n              }), status.teacherMode ? /*#__PURE__*/_jsxDEV(Button, {\n                className: \"addButton\",\n                onClick: () => addNewAnswer(quiz, parentIndex),\n                children: \"Add new answer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 39\n              }, this) : \"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }, this);\n      }) : \"\", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: status.teacherMode ? /*#__PURE__*/_jsxDEV(Button, {\n          className: \"addButton\",\n          onClick: () => addNewQuestion(quiz),\n          children: \"Add new question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 35\n        }, this) : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottomButtons\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => toggleAnswers(),\n          children: answersVisible ? \"Hide answers\" : \"Show answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 15\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 135\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"tpILZYNOr+TGD9mI7lQybJZ+41s=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/vappu/Documents/ReactKansio/quiz-app/src/App.js"],"names":["React","useEffect","useState","ButtonAppBar","makeStyles","List","ListItem","ListItemIcon","ListItemText","Checkbox","quizzesImported","uuid","Container","Paper","Button","Switch","FormControlLabel","TextField","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","margin","spacing","App","quizzesKeyed","map","quiz","index","console","log","quizQuestions","answerOptions","quizAnswers","uui","initialData","classes","data","setData","dataAlustettu","setDataAlustettu","setQuiz","answersVisible","setAnswersVisible","isTeacherView","setIsTeacherView","jemma","window","localStorage","tempData","JSON","parse","getItem","setItem","stringify","handleToggle","event","parentIndex","deepCopy","selected","selectQuiz","quizNo","toggleAnswers","addNewQuestion","quizIndex","newQuestion","question","answer","correct","push","addNewAnswer","questionIndex","newAnswer","questionChanged","target","value","answerChanged","answerIndex","deleteQuestion","splice","deleteAnswer","status","setStatus","teacherMode","handleChange","name","checked","val","quizName","undefined"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport ButtonAppBar from './ButtonAppBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport quizzesImported from './Quizzes'\nimport uuid from 'react-uuid'\nimport {Container, Paper, Button, Switch, FormControlLabel, TextField} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\n\n\nfunction App() {\n  const quizzesKeyed =  [...quizzesImported].map((quiz, index) => {\n    quiz.uuid = uuid()\n    console.log(quiz)\n    quiz.quizQuestions.map((quizQuestions, index) => {\n      quizQuestions.uuid = uuid()\n      quizQuestions.answerOptions.map((quizAnswers, index) => {\n        quizAnswers.uui = uuid()\n      })\n    })\n    return quiz;\n  })\n  const initialData = quizzesKeyed\n  console.log(initialData)\n\n\n  const classes = useStyles();\n  const [data, setData] = useState([])\n  const [dataAlustettu, setDataAlustettu] = useState(false)\n  const [quiz, setQuiz] = useState(0);\n  const [answersVisible, setAnswersVisible] = useState(false)\n  const [isTeacherView, setIsTeacherView] = useState(false)\n\n  useEffect(() => {\n    let jemma = window.localStorage;\n    let tempData = JSON.parse(jemma.getItem(\"data\"))\n    if (tempData == null) {\n      jemma.setItem(\"data\", JSON.stringify(initialData))\n      tempData = initialData\n    } \n    setData(tempData);\n    setDataAlustettu(true)\n  }, [])\n\n  useEffect(() => {\n    if (dataAlustettu) {\n      window.localStorage.setItem(\"data\", JSON.stringify(data))\n    }\n  }, [data])\n\n  const handleToggle = (event, index, parentIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected = !deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected;\n    setData(deepCopy)\n  };\n  \n  const selectQuiz = (quizNo) => {\n    setQuiz(quizNo);\n  }\n\n  const toggleAnswers = () => {\n    setAnswersVisible(!answersVisible);\n  }\n\n  // --------------------------------------\n  const addNewQuestion= (quizIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    let newQuestion= {question: \"\", answerOptions: [ {answer: \"\", correct: false, selected: false}] }\n    deepCopy[quizIndex].quizQuestions.push(newQuestion) \n    setData(deepCopy)\n  }\n\n  const addNewAnswer= (quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    let newAnswer= {answer: \"\", correct: false, selected: false}\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.push(newAnswer) \n    setData(deepCopy)\n  }\n\n  const questionChanged = (event, quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quizIndex].quizQuestions[questionIndex].question = event.target.value;\n    setData(deepCopy)\n  }\n\n  const answerChanged = (event, quizIndex, questionIndex, answerIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions[answerIndex] = event.target.value;\n    setData(deepCopy)\n  }\n\n  const deleteQuestion = (quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quizIndex].quizQuestions.splice(questionIndex,1)\n    setData(deepCopy)\n  }\n\n  const deleteAnswer = (quizIndex, questionIndex, answerIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.splice(answerIndex,1)\n    setData(deepCopy)\n  }\n\n  // --------------------------------------\n\n  const [status, setStatus] = React.useState({\n    teacherMode: true,\n  });\n\n  const handleChange = (event) => {\n    setStatus({ ...status, [event.target.name]: event.target.checked });\n  };\n\n  return (\n    <div>\n      <ButtonAppBar/>\n      <Container className=\"quizContainer\">\n        <div className={classes.root}>\n        <FormControlLabel\n        control={\n          <Switch\n          checked={status.teacherMode}\n          onChange={handleChange}\n          name=\"teacherMode\"\n          inputProps={{ 'aria-label': 'secondary checkbox' }}\n        />\n        }\n        label=\"Teacher mode\"/><br/>\n        {dataAlustettu ? data.map((val, index) => {\n          return (\n            <Button variant=\"outlined\" onClick={() => selectQuiz(index)}>{val.quizName}</Button>\n          )\n        }) : \"\"}\n        </div>\n            {dataAlustettu ? data[quiz].quizQuestions.map((value, parentIndex) => {\n              return(\n                <div className=\"questionCard\">\n                <Paper elevation={1}>\n                <List className={classes.root}>\n                {status.teacherMode ?  <p className=\"question\">\n                <TextField id=\"outlined-basic\" onChange={(event) => questionChanged(event, quiz, parentIndex)} size=\"small\" label={\"Question \" + (parentIndex+1)} variant=\"outlined\" value={value.question}/>\n                <Button className=\"deleteButton\" onClick={() => deleteQuestion(quiz, parentIndex)}>Delete</Button> </p>\n                : <p className=\"question\">{value.question}</p>}\n                {value.answerOptions.map((value, index) => {\n                  return(\n                  <ListItem key={value.uuid} role={undefined} dense >\n                   { answersVisible ? <ListItemIcon>\n                      <Checkbox\n                        onChange={(event) => handleToggle(event, index, parentIndex)}\n                        checked={value.correct}\n                        edge=\"start\"\n                        tabIndex={-1}\n                        hidden={answersVisible}\n                        disabled={!status.teacherMode}\n                      />\n                    </ListItemIcon> : null }\n                    <ListItemIcon>\n                      <Checkbox\n                        onChange={(event) => handleToggle(event, index, parentIndex)}\n                        checked={value.selected}\n                        edge=\"start\"\n                        tabIndex={-1}\n                      />\n                    </ListItemIcon>\n                    {status.teacherMode ?  \n                      <div>\n                        <TextField id=\"outlined-basic\" onChange={(event) => answerChanged(event, quiz, parentIndex, index)} size=\"small\" label={\"Answer \" + (index+1)} variant=\"outlined\" value={value.answer}/>\n                        <Button className=\"deleteButton\" onClick={() => deleteAnswer(quiz, parentIndex, index)}>Delete</Button> \n                      </div>\n                      :  <ListItemText id={index} primary={value.answer} />\n                    }\n                  </ListItem>\n                  )\n                })}\n                {status.teacherMode ? <Button className=\"addButton\" onClick={() => addNewAnswer(quiz, parentIndex)}>Add new answer</Button> : \"\"}\n                </List>\n                </Paper>\n                </div>\n              );\n            }): \"\" }<p>\n            {status.teacherMode ? <Button className=\"addButton\" onClick={() =>addNewQuestion(quiz)}>Add new question</Button> : \"\"}\n            </p>\n            <div className=\"bottomButtons\">\n              <Button variant=\"contained\" onClick={() => toggleAnswers()}>{answersVisible ? \"Hide answers\" : \"Show answers\"}</Button> <br />\n            </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}