{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\vappu\\\\Documents\\\\ReactKansio\\\\quiz-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useEffect, useState, useReducer } from 'react';\nimport ButtonAppBar from './ButtonAppBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport quizzesImported from './Quizzes';\nimport uuid from 'react-uuid';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport AddIcon from '@material-ui/icons/Add';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport { Container, Paper, Button, Switch, FormControlLabel, TextField } from '@material-ui/core';\nimport axios from 'axios';\nimport { Chart, BarSeries, Title, ArgumentAxis, ValueAxis, PieSeries } from '@devexpress/dx-react-chart-material-ui';\nimport { Animation } from '@devexpress/dx-react-chart';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  }\n}));\nconst chartData = {\n  labels: ['Aihealue 1', 'Aihealue 2', 'Aihealue 3'],\n  datasets: [{\n    label: 'My First dataset',\n    backgroundColor: 'rgba(255,99,132,0.2)',\n    borderColor: 'rgba(255,99,132,1)',\n    borderWidth: 1,\n    hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n    hoverBorderColor: 'rgba(255,99,132,1)',\n    data: [65, 59, 100]\n  }]\n};\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    '&$checked': {\n      color: green[600]\n    }\n  },\n  checked: {}\n})(props => /*#__PURE__*/_jsxDEV(Checkbox, {\n  color: \"default\",\n  ...props\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 66,\n  columnNumber: 15\n}, this)); // ----------------REDUCER----------------------------------------------------\n\nfunction reducer(state, action) {\n  let deepCopy = JSON.parse(JSON.stringify(state));\n\n  switch (action.type) {\n    case 'increment':\n      return {\n        count: state.count + 1\n      };\n\n    case \"INIT_DATA\":\n      return action.data;\n    /// <--- this should be state\n\n    case \"ANSWER_CHANGED\":\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].answer = action.data.newText;\n      return deepCopy;\n\n    case \"QUESTION_CHANGED\":\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].question = action.data.newText;\n      return deepCopy;\n\n    case \"QUIZ_CHANGED\":\n      //TODO: implement controls\n      deepCopy[action.data.quizIndex].quizName = action.data.newText;\n      return deepCopy;\n\n    case \"ADD_ANSWER\":\n      let newAnswer = {\n        answer: \"\",\n        correct: false,\n        selected: false,\n        uuid: uuid()\n      };\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions.push(newAnswer);\n      return deepCopy;\n\n    case \"ADD_QUESTION\":\n      let newQuestion = {\n        question: \"\",\n        answerOptions: [{\n          answer: \"\",\n          correct: false,\n          selected: false,\n          uuid: uuid()\n        }],\n        uuid: uuid()\n      };\n      deepCopy[action.data.quizIndex].quizQuestions.push(newQuestion);\n      return deepCopy;\n\n    case \"ADD_QUIZ\":\n      let newQuiz = {\n        quizName: \"New Quiz\",\n        quizQuestions: [{\n          question: \"\",\n          answerOptions: [{\n            answer: \"\",\n            correct: false,\n            selected: false,\n            uuid: uuid()\n          }],\n          uuid: uuid()\n        }],\n        uuid: uuid()\n      };\n      deepCopy.push(newQuiz);\n      return deepCopy;\n\n    case \"DELETE_ANSWER\":\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions.splice(action.data.answerIndex, 1);\n      return deepCopy;\n\n    case \"DELETE_QUESTION\":\n      deepCopy[action.data.quizIndex].quizQuestions.splice(action.data.questionIndex, 1);\n      return deepCopy;\n\n    case \"DELETE_QUIZ\":\n      // TODO: implement controls\n      deepCopy[action.data.quizIndex].splice(action.data.quizIndex, 1);\n      return deepCopy;\n\n    case \"SELECT_TOGGLE\":\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].selected = !deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].selected;\n      /*\n       if( deepcopy jne....selected && deepcopyjne...correct) {\n        answerCorrecti = true;\n      }\n      */\n\n      return deepCopy;\n\n    case \"CORRECT_TOGGLE\":\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].correct = !deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].correct;\n      return deepCopy;\n\n    default:\n      throw new Error();\n  }\n} // ----------------APP-------------------------------------------------------\n\n\nfunction App() {\n  _s();\n\n  const classes = useStyles();\n  const [dataAlustettu, setDataAlustettu] = useState(false);\n  const [quiz, setQuiz] = useState(0);\n  const [answersVisible, setAnswersVisible] = useState(false);\n  const [state, dispatch] = useReducer(reducer, []); // useEffect(() => {\n  //   const createData = async () => {\n  //     try {\n  //       const initialData = quizzesImported\n  //       let result = await axios.post(\"http://localhost:3005/quizzes\", initialData)\n  //       dispatch({ type: \"INIT_DATA\", data: initialData })\n  //       setDataAlustettu(true)\n  //     } catch (exception) {\n  //       alert(\"Tietokannan alustaminen epäonnistui\" + exception)\n  //     }\n  //   }\n  //   const fetchData = async () => {\n  //     try {\n  //       let result = await axios.get(\"http://localhost:3005/quizzes\")\n  //       if (result.data.length > 0) {\n  //         dispatch({ type: \"INIT_DATA\", data: result.data })\n  //         setDataAlustettu(true)\n  //       } else {\n  //         throw (\"Nyt pitää data kyllä alustaa!\")\n  //       }\n  //     }\n  //     catch (exception) {\n  //       createData();\n  //       console.log(exception)\n  //     }\n  //   }\n  //   fetchData();\n  // }, [])\n  // useEffect(() => {\n  //   const updateData = async () => {\n  //     try {\n  //       let result = await axios.put(\"http://localhost:3005/quizzes\", state)\n  //     } catch (exception) {\n  //       console.log(\"Datan päivitys ei onnistunut\")\n  //     }\n  //     finally {\n  //     }\n  //   }\n  //   if (dataAlustettu) {\n  //     updateData();\n  //   }\n  // }, [state])\n\n  const selectQuiz = quizNo => {\n    setQuiz(quizNo);\n  };\n\n  const toggleAnswers = () => {\n    setAnswersVisible(!answersVisible);\n  };\n\n  const [status, setStatus] = React.useState({\n    teacherMode: false\n  });\n\n  const handleChange = event => {\n    setStatus({ ...status,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  const [topicList, setTopicList] = useState([]);\n\n  const buildTopicList = topic => {\n    if (!topicList.includes(topic)) {\n      var newTopicList = [...topicList].concat(topic);\n      setTopicList(newTopicList);\n    }\n  };\n\n  const [data, setData] = useState([{\n    aihealue: 'ATK:n perusteet',\n    Points: 5,\n    MaxPoints: 10,\n    Percentage: 50\n  }, {\n    aihealue: 'Biologian alkeet',\n    Points: 2,\n    MaxPoints: 10,\n    Percentage: 20\n  }, {\n    aihealue: 'Matikan lopputentti',\n    Points: 10,\n    MaxPoints: 10,\n    Percentage: 100\n  }, {\n    aihealue: 'Kemian pääsykoe',\n    Points: 8,\n    MaxPoints: 10,\n    Percentage: 80\n  }, {\n    aihealue: 'Biologian jatkoa ',\n    Points: 5,\n    MaxPoints: 10,\n    Percentage: 50\n  }, {\n    aihealue: 'Terveystiedon alkeet',\n    Points: 9,\n    MaxPoints: 10,\n    Percentage: 90\n  }]);\n\n  const numberChange = (event, index) => {\n    console.log(event.target.value);\n    console.log(index);\n    var newNumber = event.target.value;\n    var dataCopy = [...data];\n    dataCopy[index].Points = newNumber;\n    dataCopy[index].Percentage = newNumber / dataCopy[index].MaxPoints * 100;\n    setData(dataCopy);\n  };\n\n  const maxPointChange = (event, index) => {\n    console.log(event.target.value);\n    console.log(index);\n    var newNumber = event.target.value;\n    var dataCopy = [...data];\n    dataCopy[index].MaxPoints = newNumber;\n    dataCopy[index].Percentage = dataCopy[index].Points / newNumber * 100;\n    setData(dataCopy);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ButtonAppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"quizContainer\",\n      children: [data.map((value, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            id: \"Points\",\n            label: value.aihealue,\n            type: \"number\",\n            value: value.Points,\n            onChange: event => numberChange(event, index),\n            InputLabelProps: {\n              shrink: true\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            id: \"MaxPoints\",\n            label: \"maksimipisteet\",\n            type: \"number\",\n            value: value.MaxPoints,\n            onChange: event => maxPointChange(event, index),\n            InputLabelProps: {\n              shrink: true\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 15\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(Chart, {\n        data: data,\n        children: [/*#__PURE__*/_jsxDEV(ArgumentAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ValueAxis, {\n          max: 3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BarSeries, {\n          valueField: \"Percentage\",\n          argumentField: \"aihealue\",\n          label: \"hello\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Title, {\n          text: \"Testien pisteprosentit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Animation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"M6nn9vP8w9KXo1zvNYscQxmTySI=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/vappu/Documents/ReactKansio/quiz-app/src/App.js"],"names":["React","useEffect","useState","useReducer","ButtonAppBar","makeStyles","List","ListItem","ListItemIcon","ListItemText","Checkbox","quizzesImported","uuid","DeleteIcon","AddCircleIcon","AddIcon","withStyles","green","Container","Paper","Button","Switch","FormControlLabel","TextField","axios","Chart","BarSeries","Title","ArgumentAxis","ValueAxis","PieSeries","Animation","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","margin","spacing","chartData","labels","datasets","label","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","data","GreenCheckbox","color","checked","props","reducer","state","action","deepCopy","JSON","parse","stringify","type","count","quizIndex","quizQuestions","questionIndex","answerOptions","answerIndex","answer","newText","question","quizName","newAnswer","correct","selected","push","newQuestion","newQuiz","splice","Error","App","classes","dataAlustettu","setDataAlustettu","quiz","setQuiz","answersVisible","setAnswersVisible","dispatch","selectQuiz","quizNo","toggleAnswers","status","setStatus","teacherMode","handleChange","event","target","name","topicList","setTopicList","buildTopicList","topic","includes","newTopicList","concat","setData","aihealue","Points","MaxPoints","Percentage","numberChange","index","console","log","value","newNumber","dataCopy","maxPointChange","map","shrink"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useEffect, useState, useReducer } from 'react';\nimport ButtonAppBar from './ButtonAppBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport quizzesImported from './Quizzes'\nimport uuid from 'react-uuid'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport AddIcon from '@material-ui/icons/Add';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport { Container, Paper, Button, Switch, FormControlLabel, TextField } from '@material-ui/core';\nimport axios from 'axios';\nimport {\n  Chart,\n  BarSeries,\n  Title,\n  ArgumentAxis,\n  ValueAxis,\n  PieSeries,\n\n} from '@devexpress/dx-react-chart-material-ui';\n\nimport { Animation } from '@devexpress/dx-react-chart';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nconst chartData = {\n  labels: ['Aihealue 1', 'Aihealue 2', 'Aihealue 3'],\n  datasets: [\n    {\n      label: 'My First dataset',\n      backgroundColor: 'rgba(255,99,132,0.2)',\n      borderColor: 'rgba(255,99,132,1)',\n      borderWidth: 1,\n      hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n      hoverBorderColor: 'rgba(255,99,132,1)',\n      data: [65, 59, 100]\n    }\n  ]\n};\n\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    '&$checked': {\n      color: green[600],\n    },\n  },\n  checked: {},\n})((props) => <Checkbox color=\"default\" {...props} />);\n\n// ----------------REDUCER----------------------------------------------------\n\nfunction reducer(state, action) {\n  let deepCopy = JSON.parse(JSON.stringify(state))\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case \"INIT_DATA\":\n      return action.data; /// <--- this should be state\n    case \"ANSWER_CHANGED\":\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].answer = action.data.newText;\n      return deepCopy;\n    case \"QUESTION_CHANGED\":\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].question = action.data.newText;\n      return deepCopy;\n    case \"QUIZ_CHANGED\":\n      //TODO: implement controls\n      deepCopy[action.data.quizIndex].quizName = action.data.newText;\n      return deepCopy;\n    case \"ADD_ANSWER\":\n      let newAnswer = { answer: \"\", correct: false, selected: false, uuid: uuid() }\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions.push(newAnswer)\n      return deepCopy;\n    case \"ADD_QUESTION\":\n      let newQuestion = { question: \"\", answerOptions: [{ answer: \"\", correct: false, selected: false, uuid: uuid() }], uuid: uuid() }\n      deepCopy[action.data.quizIndex].quizQuestions.push(newQuestion)\n      return deepCopy;\n    case \"ADD_QUIZ\":\n      let newQuiz = { quizName: \"New Quiz\", quizQuestions: [{ question: \"\", answerOptions: [{ answer: \"\", correct: false, selected: false, uuid: uuid() }], uuid: uuid() }], uuid: uuid() }\n      deepCopy.push(newQuiz)\n      return deepCopy;\n    case \"DELETE_ANSWER\":\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions.splice(action.data.answerIndex, 1)\n      return deepCopy;\n    case \"DELETE_QUESTION\":\n      deepCopy[action.data.quizIndex].quizQuestions.splice(action.data.questionIndex, 1)\n      return deepCopy;\n    case \"DELETE_QUIZ\":\n      // TODO: implement controls\n      deepCopy[action.data.quizIndex].splice(action.data.quizIndex, 1)\n      return deepCopy;\n    case \"SELECT_TOGGLE\":\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].selected =\n        !deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].selected;\n\n      /*\n       if( deepcopy jne....selected && deepcopyjne...correct) {\n        answerCorrecti = true;\n      }\n      */\n      return deepCopy;\n    case \"CORRECT_TOGGLE\":\n      deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].correct =\n        !deepCopy[action.data.quizIndex].quizQuestions[action.data.questionIndex].answerOptions[action.data.answerIndex].correct;\n      return deepCopy;\n    default:\n      throw new Error();\n  }\n}\n\n// ----------------APP-------------------------------------------------------\n\nfunction App() {\n  const classes = useStyles();\n  const [dataAlustettu, setDataAlustettu] = useState(false);\n  const [quiz, setQuiz] = useState(0);\n  const [answersVisible, setAnswersVisible] = useState(false);\n  const [state, dispatch] = useReducer(reducer, []);\n\n\n  // useEffect(() => {\n  //   const createData = async () => {\n  //     try {\n  //       const initialData = quizzesImported\n  //       let result = await axios.post(\"http://localhost:3005/quizzes\", initialData)\n  //       dispatch({ type: \"INIT_DATA\", data: initialData })\n  //       setDataAlustettu(true)\n  //     } catch (exception) {\n  //       alert(\"Tietokannan alustaminen epäonnistui\" + exception)\n  //     }\n  //   }\n\n  //   const fetchData = async () => {\n  //     try {\n  //       let result = await axios.get(\"http://localhost:3005/quizzes\")\n  //       if (result.data.length > 0) {\n  //         dispatch({ type: \"INIT_DATA\", data: result.data })\n  //         setDataAlustettu(true)\n\n  //       } else {\n  //         throw (\"Nyt pitää data kyllä alustaa!\")\n  //       }\n  //     }\n  //     catch (exception) {\n  //       createData();\n  //       console.log(exception)\n  //     }\n  //   }\n  //   fetchData();\n  // }, [])\n\n  // useEffect(() => {\n  //   const updateData = async () => {\n  //     try {\n  //       let result = await axios.put(\"http://localhost:3005/quizzes\", state)\n  //     } catch (exception) {\n  //       console.log(\"Datan päivitys ei onnistunut\")\n  //     }\n  //     finally {\n\n  //     }\n  //   }\n  //   if (dataAlustettu) {\n  //     updateData();\n  //   }\n  // }, [state])\n\n  const selectQuiz = (quizNo) => {\n    setQuiz(quizNo);\n  }\n\n  const toggleAnswers = () => {\n    setAnswersVisible(!answersVisible);\n\n  }\n\n  const [status, setStatus] = React.useState({\n    teacherMode: false,\n  });\n\n  const handleChange = (event) => {\n    setStatus({ ...status, [event.target.name]: event.target.checked });\n  };\n\n  const [topicList, setTopicList] = useState([])\n\n  const buildTopicList = (topic) => {\n    if (!topicList.includes(topic)) {\n      var newTopicList = [...topicList].concat(topic)\n      setTopicList(newTopicList)\n    }\n  }\n\n\n\n  const [data,setData] = useState([\n    { aihealue: 'ATK:n perusteet', Points: 5, MaxPoints: 10, Percentage: 50 },\n    { aihealue: 'Biologian alkeet', Points: 2, MaxPoints: 10, Percentage: 20 },\n    { aihealue: 'Matikan lopputentti', Points: 10, MaxPoints: 10, Percentage: 100 },\n    { aihealue: 'Kemian pääsykoe', Points: 8, MaxPoints: 10,Percentage: 80 },\n    { aihealue: 'Biologian jatkoa ', Points: 5, MaxPoints: 10,Percentage: 50 },\n    { aihealue: 'Terveystiedon alkeet', Points: 9, MaxPoints: 10,Percentage: 90},\n  ]);\n\n  const numberChange = (event, index) => {\n    console.log(event.target.value)\n    console.log(index)\n  \n    var newNumber = event.target.value;\n    var dataCopy = [...data]\n    dataCopy[index].Points = newNumber;\n    dataCopy[index].Percentage = newNumber/dataCopy[index].MaxPoints*100\n    setData(dataCopy)\n  }\n  \n  const maxPointChange = (event, index) => {\n    console.log(event.target.value)\n    console.log(index)\n  \n    var newNumber = event.target.value;\n    var dataCopy = [...data]\n    dataCopy[index].MaxPoints = newNumber;\n    dataCopy[index].Percentage = dataCopy[index].Points/newNumber*100\n    setData(dataCopy)\n  }\n\n\n  return (\n    <div>\n      <ButtonAppBar />\n      <Container className=\"quizContainer\">\n      {data.map((value, index) => {\n            return (\n              <div>\n              <TextField\n                id=\"Points\"\n                label={value.aihealue}\n                type=\"number\"\n                value={value.Points}\n                onChange={(event)=> numberChange(event, index)}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n              />\n              <TextField\n                id=\"MaxPoints\"\n                label=\"maksimipisteet\"\n                type=\"number\"\n                value={value.MaxPoints}\n                onChange={(event)=> maxPointChange(event, index)}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n              />\n              </div>)\n          })}\n       <Chart\n          data={data}\n        >\n          <ArgumentAxis />\n          <ValueAxis max={3} />\n          <BarSeries\n            valueField=\"Percentage\"\n            argumentField=\"aihealue\"\n            label=\"hello\"\n          />\n\n          <Title text=\"Testien pisteprosentit\" />\n          <Animation />\n        </Chart>\n\n\n        {/* <Chart\n          data={data}\n        >\n          <ArgumentAxis />\n          <ValueAxis max={3} />\n          <BarSeries\n            valueField=\"Points\"\n            argumentField=\"aihealue\"\n          />\n\n          <Title text=\"Testipisteet Aihealueet\" />\n          <Animation />\n        </Chart> */}\n\n        <div>\n\n        </div>\n\n        {/* \n        <div className={classes.root}>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={status.teacherMode}\n                onChange={handleChange}\n                name=\"teacherMode\"\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\n              />\n            }\n            label=\"Teacher mode\" /><br />\n          {dataAlustettu ? state.map((val, index) => {\n            return <Button variant=\"outlined\" onClick={() => selectQuiz(index)}>{val.quizName}</Button>\n          })\n            : null}\n          {status.teacherMode ? <Button onClick={(event) => dispatch({ type: \"ADD_QUIZ\", data: {} })}><AddCircleIcon /></Button> : \"\"}\n        </div>\n\n        {dataAlustettu ? state[quiz].quizQuestions.map((value, parentIndex) => {\n          buildTopicList(value.topicArea)\n          console.log(topicList)\n\n          return (\n            <div className=\"questionCard\">\n              <Paper elevation={1}>\n                <List className={classes.root}>\n                  <h3>{value.topicArea}</h3>\n                  {status.teacherMode ?\n                    <ListItem key={value.uuid} role={undefined} dense >\n                      <TextField fullWidth onChange={(event) => dispatch({ type: \"QUESTION_CHANGED\", data: { newText: event.target.value, quizIndex: quiz, questionIndex: parentIndex } })} size=\"small\" label={\"Question \" + (parentIndex + 1)} variant=\"outlined\" value={value.question} />\n                      <Button className=\"deleteButton\" onClick={(event) => dispatch({ type: \"DELETE_QUESTION\", data: { newText: event.target.value, quizIndex: quiz, questionIndex: parentIndex } })}><DeleteIcon /></Button>\n                    </ListItem>\n                    : <div className=\"question\">{value.question}</div>}\n                  {value.answerOptions.map((value, index) => {\n\n                    return (\n                      <ListItem key={value.uuid} role={undefined} dense >\n                        { answersVisible || status.teacherMode ? <ListItemIcon>\n                          <GreenCheckbox\n                            onChange={(event) => dispatch({ type: \"CORRECT_TOGGLE\", data: { newText: event.target.value, quizIndex: quiz, questionIndex: parentIndex, answerIndex: index } })}\n                            checked={value.correct}\n                            edge=\"start\"\n                            tabIndex={-1}\n                            hidden={answersVisible}\n                            disabled={!status.teacherMode}\n                          />\n                        </ListItemIcon> : null}\n                        <ListItemIcon>\n                          <Checkbox\n                            onChange={(event) => dispatch({ type: \"SELECT_TOGGLE\", data: { newText: event.target.value, quizIndex: quiz, questionIndex: parentIndex, answerIndex: index } })}\n                            checked={value.selected}\n                            edge=\"start\"\n                            tabIndex={-1}\n                          />\n                        </ListItemIcon>\n                        {status.teacherMode ?\n                          <div>\n                            <TextField onChange={(event) => dispatch({ type: \"ANSWER_CHANGED\", data: { newText: event.target.value, quizIndex: quiz, questionIndex: parentIndex, answerIndex: index } })} size=\"small\" label={\"Answer \" + (index + 1)} variant=\"outlined\" value={value.answer} />\n                            <Button className=\"deleteButton\" onClick={(event) => dispatch({ type: \"DELETE_ANSWER\", data: { newText: event.target.value, quizIndex: quiz, questionIndex: parentIndex, answerIndex: index } })}><DeleteIcon /></Button>\n                          </div>\n                          : <div><ListItemText id={index} primary={value.answer} /></div>\n                        }\n                      </ListItem>\n                    )\n                  })}\n                  {status.teacherMode ? <div className=\"addButton\"><Button onClick={(event) => dispatch({ type: \"ADD_ANSWER\", data: { newText: event.target.value, quizIndex: quiz, questionIndex: parentIndex } })}><AddCircleIcon /></Button></div> : \"\"}\n                </List>\n              </Paper>\n            </div>\n          );\n        })\n          : null}\n        <div className=\"bottomButtons\">\n          {status.teacherMode ? <Button variant=\"contained\" onClick={(event) => dispatch({ type: \"ADD_QUESTION\", data: { newText: event.target.value, quizIndex: quiz } })}><AddIcon />   Add new question</Button> :\n            <Button variant=\"contained\" onClick={() => toggleAnswers()}>{answersVisible ? \"Hide correct answers\" : \"Show correct answers\"}</Button>\n          }</div>  */}\n      </Container>\n\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}