{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\vappu\\\\Documents\\\\ReactKansio\\\\quiz-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport ButtonAppBar from './ButtonAppBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport quizzesImported from './Quizzes';\nimport uuid from 'react-uuid';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Container, Paper, Button, Switch, FormControlLabel, TextField } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  }\n}));\n\nfunction App() {\n  _s();\n\n  const initialData = [...quizzesImported].map(quizObject => {\n    console.log(quizObject);\n    quizObject.uuid = uuid();\n    quizObject.quizQuestions.map(questionObject => {\n      console.log(questionObject);\n      questionObject.uuid = uuid();\n      return questionObject;\n    });\n    return quizObject;\n  });\n  console.log(\"INITIAL DATA BELOW\");\n  console.log(initialData);\n  const classes = useStyles();\n  const [data, setData] = useState([]);\n  const [dataAlustettu, setDataAlustettu] = useState(false);\n  const [quiz, setQuiz] = useState(0);\n  const [answersVisible, setAnswersVisible] = useState(false);\n  useEffect(() => {\n    let jemma = window.localStorage;\n    let tempData = JSON.parse(jemma.getItem(\"data\"));\n\n    if (tempData == null) {\n      jemma.setItem(\"data\", JSON.stringify(initialData));\n      tempData = initialData;\n    }\n\n    setData(tempData);\n    setDataAlustettu(true);\n  }, []);\n  useEffect(() => {\n    if (dataAlustettu) {\n      window.localStorage.setItem(\"data\", JSON.stringify(data));\n    }\n  }, [data]);\n\n  const handleToggle = (event, index, parentIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected = !deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected;\n    setData(deepCopy);\n  };\n\n  const handleCorrectToggle = (event, index, parentIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].correct = !deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].correct;\n    setData(deepCopy);\n  };\n\n  const selectQuiz = quizNo => {\n    setQuiz(quizNo);\n  };\n\n  const toggleAnswers = () => {\n    setAnswersVisible(!answersVisible);\n  }; // --------------------------------------\n\n\n  const addNewQuestion = quizIndex => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    let newQuestion = {\n      question: \"\",\n      answerOptions: [{\n        answer: \"\",\n        correct: false,\n        selected: false,\n        uuid: uuid()\n      }],\n      uuid: uuid()\n    };\n    deepCopy[quizIndex].quizQuestions.push(newQuestion);\n    setData(deepCopy);\n  };\n\n  const addNewAnswer = (quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    let newAnswer = {\n      answer: \"\",\n      correct: false,\n      selected: false,\n      uuid: uuid()\n    };\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.push(newAnswer);\n    setData(deepCopy);\n  };\n\n  const questionChanged = (event, quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quizIndex].quizQuestions[questionIndex].question = event.target.value;\n    setData(deepCopy);\n  };\n\n  const answerChanged = (event, quizIndex, questionIndex, answerIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions[answerIndex].answer = event.target.value;\n    setData(deepCopy);\n  };\n\n  const deleteQuestion = (quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quizIndex].quizQuestions.splice(questionIndex, 1);\n    setData(deepCopy);\n  };\n\n  const deleteAnswer = (quizIndex, questionIndex, answerIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data));\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.splice(answerIndex, 1);\n    setData(deepCopy);\n  }; // --------------------------------------\n\n\n  const [status, setStatus] = React.useState({\n    teacherMode: true\n  });\n\n  const handleChange = event => {\n    setStatus({ ...status,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ButtonAppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"quizContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Switch, {\n            checked: status.teacherMode,\n            onChange: handleChange,\n            name: \"teacherMode\",\n            inputProps: {\n              'aria-label': 'secondary checkbox'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 11\n          }, this),\n          label: \"Teacher mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 31\n        }, this), data.map((val, index) => {\n          return /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: () => selectQuiz(index),\n            children: val.quizName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => addNewAnswer(quiz, parentIndex),\n          children: /*#__PURE__*/_jsxDEV(AddCircleIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 68\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), dataAlustettu ? data[quiz].quizQuestions.map((value, parentIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"questionCard\",\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 1,\n            children: /*#__PURE__*/_jsxDEV(List, {\n              className: classes.root,\n              children: [status.teacherMode ? /*#__PURE__*/_jsxDEV(ListItem, {\n                role: undefined,\n                dense: true,\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  onChange: event => questionChanged(event, quiz, parentIndex),\n                  size: \"small\",\n                  label: \"Question \" + (parentIndex + 1),\n                  variant: \"outlined\",\n                  value: value.question\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"deleteButton\",\n                  onClick: () => deleteQuestion(quiz, parentIndex),\n                  children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 163,\n                    columnNumber: 102\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 19\n                }, this)]\n              }, value.uuid, true, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"question\",\n                children: value.question\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 19\n              }, this), value.answerOptions.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(ListItem, {\n                  role: undefined,\n                  dense: true,\n                  children: [answersVisible || status.teacherMode ? /*#__PURE__*/_jsxDEV(ListItemIcon, {\n                    children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      onChange: event => handleCorrectToggle(event, index, parentIndex),\n                      checked: value.correct,\n                      edge: \"start\",\n                      tabIndex: -1,\n                      hidden: answersVisible,\n                      disabled: !status.teacherMode\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 170,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 169,\n                    columnNumber: 61\n                  }, this) : null, /*#__PURE__*/_jsxDEV(ListItemIcon, {\n                    children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      onChange: event => handleToggle(event, index, parentIndex),\n                      checked: value.selected,\n                      edge: \"start\",\n                      tabIndex: -1\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 180,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 21\n                  }, this), status.teacherMode ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(TextField, {\n                      onChange: event => answerChanged(event, quiz, parentIndex, index),\n                      size: \"small\",\n                      label: \"Answer \" + (index + 1),\n                      variant: \"outlined\",\n                      value: value.answer\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 189,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"deleteButton\",\n                      onClick: () => deleteAnswer(quiz, parentIndex, index),\n                      children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 190,\n                        columnNumber: 113\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 190,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 188,\n                    columnNumber: 23\n                  }, this) : /*#__PURE__*/_jsxDEV(ListItemText, {\n                    id: index,\n                    primary: value.answer\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 192,\n                    columnNumber: 26\n                  }, this)]\n                }, value.uuid, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 19\n                }, this);\n              }), status.teacherMode ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"addButton\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: () => addNewAnswer(quiz, parentIndex),\n                  children: /*#__PURE__*/_jsxDEV(AddCircleIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 197,\n                    columnNumber: 122\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 66\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 39\n              }, this) : \"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }, this);\n      }) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottomButtons\",\n        children: status.teacherMode ? /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => addNewQuestion(quiz),\n          children: [/*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 99\n          }, this), \"   Add new question\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 35\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => toggleAnswers(),\n          children: answersVisible ? \"Hide correct answers\" : \"Show correct answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"u4MBdbmU1Usbi7gB3P07wuWz96w=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/vappu/Documents/ReactKansio/quiz-app/src/App.js"],"names":["React","useEffect","useState","ButtonAppBar","makeStyles","List","ListItem","ListItemIcon","ListItemText","Checkbox","quizzesImported","uuid","DeleteIcon","AddCircleIcon","AddIcon","Container","Paper","Button","Switch","FormControlLabel","TextField","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","margin","spacing","App","initialData","map","quizObject","console","log","quizQuestions","questionObject","classes","data","setData","dataAlustettu","setDataAlustettu","quiz","setQuiz","answersVisible","setAnswersVisible","jemma","window","localStorage","tempData","JSON","parse","getItem","setItem","stringify","handleToggle","event","index","parentIndex","deepCopy","answerOptions","selected","handleCorrectToggle","correct","selectQuiz","quizNo","toggleAnswers","addNewQuestion","quizIndex","newQuestion","question","answer","push","addNewAnswer","questionIndex","newAnswer","questionChanged","target","value","answerChanged","answerIndex","deleteQuestion","splice","deleteAnswer","status","setStatus","teacherMode","handleChange","name","checked","val","quizName","undefined"],"mappings":";;;;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,eAAP,MAA4B,WAA5B;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAAQC,SAAR,EAAmBC,KAAnB,EAA0BC,MAA1B,EAAkCC,MAAlC,EAA0CC,gBAA1C,EAA4DC,SAA5D,QAA4E,mBAA5E;AAEA,MAAMC,SAAS,GAAGjB,UAAU,CAAEkB,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,MADH;AAEJC,IAAAA,QAAQ,EAAE,MAFN;AAGJC,IAAAA,eAAe,EAAEJ,KAAK,CAACK,OAAN,CAAcC,UAAd,CAAyBC,KAHtC;AAIJ,aAAS;AACPC,MAAAA,MAAM,EAAER,KAAK,CAACS,OAAN,CAAc,CAAd;AADD;AAJL;AADiC,CAAZ,CAAD,CAA5B;;AAWA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,WAAW,GAAG,CAAC,GAAGvB,eAAJ,EAAqBwB,GAArB,CAA0BC,UAAD,IAAgB;AAC3DC,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACAA,IAAAA,UAAU,CAACxB,IAAX,GAAkBA,IAAI,EAAtB;AACAwB,IAAAA,UAAU,CAACG,aAAX,CAAyBJ,GAAzB,CAA8BK,cAAD,IAAoB;AAC/CH,MAAAA,OAAO,CAACC,GAAR,CAAYE,cAAZ;AACAA,MAAAA,cAAc,CAAC5B,IAAf,GAAsBA,IAAI,EAA1B;AAEA,aAAO4B,cAAP;AACD,KALD;AAMA,WAAOJ,UAAP;AACD,GAVmB,CAApB;AAWAC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACA,QAAMO,OAAO,GAAGnB,SAAS,EAAzB;AACA,QAAM,CAACoB,IAAD,EAAOC,OAAP,IAAkBxC,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACyC,aAAD,EAAgBC,gBAAhB,IAAoC1C,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAAC2C,IAAD,EAAOC,OAAP,IAAkB5C,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAAC6C,cAAD,EAAiBC,iBAAjB,IAAsC9C,QAAQ,CAAC,KAAD,CAApD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgD,KAAK,GAAGC,MAAM,CAACC,YAAnB;AACA,QAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACM,OAAN,CAAc,MAAd,CAAX,CAAf;;AACA,QAAIH,QAAQ,IAAI,IAAhB,EAAsB;AACpBH,MAAAA,KAAK,CAACO,OAAN,CAAc,MAAd,EAAsBH,IAAI,CAACI,SAAL,CAAexB,WAAf,CAAtB;AACAmB,MAAAA,QAAQ,GAAGnB,WAAX;AACD;;AACDS,IAAAA,OAAO,CAACU,QAAD,CAAP;AACAR,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,GATQ,EASN,EATM,CAAT;AAWA3C,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0C,aAAJ,EAAmB;AACjBO,MAAAA,MAAM,CAACC,YAAP,CAAoBK,OAApB,CAA4B,MAA5B,EAAoCH,IAAI,CAACI,SAAL,CAAehB,IAAf,CAApC;AACD;AACF,GAJQ,EAIN,CAACA,IAAD,CAJM,CAAT;;AAMA,QAAMiB,YAAY,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAeC,WAAf,KAA+B;AAClD,QAAIC,QAAQ,GAAGT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACI,SAAL,CAAehB,IAAf,CAAX,CAAf;AACAqB,IAAAA,QAAQ,CAACjB,IAAD,CAAR,CAAeP,aAAf,CAA6BuB,WAA7B,EAA0CE,aAA1C,CAAwDH,KAAxD,EAA+DI,QAA/D,GAA0E,CAACF,QAAQ,CAACjB,IAAD,CAAR,CAAeP,aAAf,CAA6BuB,WAA7B,EAA0CE,aAA1C,CAAwDH,KAAxD,EAA+DI,QAA1I;AACAtB,IAAAA,OAAO,CAACoB,QAAD,CAAP;AACD,GAJD;;AAMA,QAAMG,mBAAmB,GAAG,CAACN,KAAD,EAAQC,KAAR,EAAeC,WAAf,KAA+B;AACzD,QAAIC,QAAQ,GAAGT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACI,SAAL,CAAehB,IAAf,CAAX,CAAf;AACAqB,IAAAA,QAAQ,CAACjB,IAAD,CAAR,CAAeP,aAAf,CAA6BuB,WAA7B,EAA0CE,aAA1C,CAAwDH,KAAxD,EAA+DM,OAA/D,GAAyE,CAACJ,QAAQ,CAACjB,IAAD,CAAR,CAAeP,aAAf,CAA6BuB,WAA7B,EAA0CE,aAA1C,CAAwDH,KAAxD,EAA+DM,OAAzI;AACAxB,IAAAA,OAAO,CAACoB,QAAD,CAAP;AACD,GAJD;;AAMA,QAAMK,UAAU,GAAIC,MAAD,IAAY;AAC7BtB,IAAAA,OAAO,CAACsB,MAAD,CAAP;AACD,GAFD;;AAIA,QAAMC,aAAa,GAAG,MAAM;AAC1BrB,IAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AACD,GAFD,CArDa,CAyDb;;;AACA,QAAMuB,cAAc,GAAGC,SAAD,IAAe;AACnC,QAAIT,QAAQ,GAAGT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACI,SAAL,CAAehB,IAAf,CAAX,CAAf;AACA,QAAI+B,WAAW,GAAE;AAACC,MAAAA,QAAQ,EAAE,EAAX;AAAeV,MAAAA,aAAa,EAAE,CAAE;AAACW,QAAAA,MAAM,EAAE,EAAT;AAAaR,QAAAA,OAAO,EAAE,KAAtB;AAA6BF,QAAAA,QAAQ,EAAE,KAAvC;AAA6CrD,QAAAA,IAAI,EAAEA,IAAI;AAAvD,OAAF,CAA9B;AAA6FA,MAAAA,IAAI,EAAEA,IAAI;AAAvG,KAAjB;AACAmD,IAAAA,QAAQ,CAACS,SAAD,CAAR,CAAoBjC,aAApB,CAAkCqC,IAAlC,CAAuCH,WAAvC;AACA9B,IAAAA,OAAO,CAACoB,QAAD,CAAP;AACD,GALD;;AAOA,QAAMc,YAAY,GAAE,CAACL,SAAD,EAAYM,aAAZ,KAA8B;AAChD,QAAIf,QAAQ,GAAGT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACI,SAAL,CAAehB,IAAf,CAAX,CAAf;AACA,QAAIqC,SAAS,GAAE;AAACJ,MAAAA,MAAM,EAAE,EAAT;AAAaR,MAAAA,OAAO,EAAE,KAAtB;AAA6BF,MAAAA,QAAQ,EAAE,KAAvC;AAA8CrD,MAAAA,IAAI,EAAEA,IAAI;AAAxD,KAAf;AACAmD,IAAAA,QAAQ,CAACS,SAAD,CAAR,CAAoBjC,aAApB,CAAkCuC,aAAlC,EAAiDd,aAAjD,CAA+DY,IAA/D,CAAoEG,SAApE;AACApC,IAAAA,OAAO,CAACoB,QAAD,CAAP;AACD,GALD;;AAOA,QAAMiB,eAAe,GAAG,CAACpB,KAAD,EAAQY,SAAR,EAAmBM,aAAnB,KAAqC;AAC3D,QAAIf,QAAQ,GAAGT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACI,SAAL,CAAehB,IAAf,CAAX,CAAf;AACAqB,IAAAA,QAAQ,CAACS,SAAD,CAAR,CAAoBjC,aAApB,CAAkCuC,aAAlC,EAAiDJ,QAAjD,GAA4Dd,KAAK,CAACqB,MAAN,CAAaC,KAAzE;AACAvC,IAAAA,OAAO,CAACoB,QAAD,CAAP;AACD,GAJD;;AAMA,QAAMoB,aAAa,GAAG,CAACvB,KAAD,EAAQY,SAAR,EAAmBM,aAAnB,EAAkCM,WAAlC,KAAkD;AACtE,QAAIrB,QAAQ,GAAGT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACI,SAAL,CAAehB,IAAf,CAAX,CAAf;AACAqB,IAAAA,QAAQ,CAACS,SAAD,CAAR,CAAoBjC,aAApB,CAAkCuC,aAAlC,EAAiDd,aAAjD,CAA+DoB,WAA/D,EAA4ET,MAA5E,GAAqFf,KAAK,CAACqB,MAAN,CAAaC,KAAlG;AACAvC,IAAAA,OAAO,CAACoB,QAAD,CAAP;AACD,GAJD;;AAMA,QAAMsB,cAAc,GAAG,CAACb,SAAD,EAAYM,aAAZ,KAA8B;AACnD,QAAIf,QAAQ,GAAGT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACI,SAAL,CAAehB,IAAf,CAAX,CAAf;AACAqB,IAAAA,QAAQ,CAACS,SAAD,CAAR,CAAoBjC,aAApB,CAAkC+C,MAAlC,CAAyCR,aAAzC,EAAuD,CAAvD;AACAnC,IAAAA,OAAO,CAACoB,QAAD,CAAP;AACD,GAJD;;AAMA,QAAMwB,YAAY,GAAG,CAACf,SAAD,EAAYM,aAAZ,EAA2BM,WAA3B,KAA2C;AAC9D,QAAIrB,QAAQ,GAAGT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACI,SAAL,CAAehB,IAAf,CAAX,CAAf;AACAqB,IAAAA,QAAQ,CAACS,SAAD,CAAR,CAAoBjC,aAApB,CAAkCuC,aAAlC,EAAiDd,aAAjD,CAA+DsB,MAA/D,CAAsEF,WAAtE,EAAkF,CAAlF;AACAzC,IAAAA,OAAO,CAACoB,QAAD,CAAP;AACD,GAJD,CA1Fa,CAgGb;;;AAEA,QAAM,CAACyB,MAAD,EAASC,SAAT,IAAsBxF,KAAK,CAACE,QAAN,CAAe;AACzCuF,IAAAA,WAAW,EAAE;AAD4B,GAAf,CAA5B;;AAIA,QAAMC,YAAY,GAAI/B,KAAD,IAAW;AAC9B6B,IAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,OAAC5B,KAAK,CAACqB,MAAN,CAAaW,IAAd,GAAqBhC,KAAK,CAACqB,MAAN,CAAaY;AAA/C,KAAD,CAAT;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,eAArB;AAAA,8BACE;AAAK,QAAA,SAAS,EAAEpD,OAAO,CAACjB,IAAxB;AAAA,gCACA,QAAC,gBAAD;AACA,UAAA,OAAO,eACL,QAAC,MAAD;AACA,YAAA,OAAO,EAAEgE,MAAM,CAACE,WADhB;AAEA,YAAA,QAAQ,EAAEC,YAFV;AAGA,YAAA,IAAI,EAAC,aAHL;AAIA,YAAA,UAAU,EAAE;AAAE,4BAAc;AAAhB;AAJZ;AAAA;AAAA;AAAA;AAAA,kBAFF;AASA,UAAA,KAAK,EAAC;AATN;AAAA;AAAA;AAAA;AAAA,gBADA,eAUsB;AAAA;AAAA;AAAA;AAAA,gBAVtB,EAWCjD,IAAI,CAACP,GAAL,CAAS,CAAC2D,GAAD,EAAMjC,KAAN,KAAgB;AACxB,8BACE,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,UAAhB;AAA2B,YAAA,OAAO,EAAE,MAAMO,UAAU,CAACP,KAAD,CAApD;AAAA,sBAA8DiC,GAAG,CAACC;AAAlE;AAAA;AAAA;AAAA;AAAA,kBADF;AAGD,SAJA,CAXD,eAeG,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAE,MAAMlB,YAAY,CAAC/B,IAAD,EAAOgB,WAAP,CAAnC;AAAA,iCAAwD,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAxD;AAAA;AAAA;AAAA;AAAA,gBAfH;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAkBOlB,aAAa,GAAGF,IAAI,CAACI,IAAD,CAAJ,CAAWP,aAAX,CAAyBJ,GAAzB,CAA6B,CAAC+C,KAAD,EAAQpB,WAAR,KAAwB;AACpE,4BACE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,iCACA,QAAC,KAAD;AAAO,YAAA,SAAS,EAAE,CAAlB;AAAA,mCACA,QAAC,IAAD;AAAM,cAAA,SAAS,EAAErB,OAAO,CAACjB,IAAzB;AAAA,yBACCgE,MAAM,CAACE,WAAP,gBACC,QAAC,QAAD;AAA2B,gBAAA,IAAI,EAAEM,SAAjC;AAA4C,gBAAA,KAAK,MAAjD;AAAA,wCACA,QAAC,SAAD;AAAW,kBAAA,SAAS,MAApB;AAAqB,kBAAA,QAAQ,EAAGpC,KAAD,IAAWoB,eAAe,CAACpB,KAAD,EAAQd,IAAR,EAAcgB,WAAd,CAAzD;AAAqF,kBAAA,IAAI,EAAC,OAA1F;AAAkG,kBAAA,KAAK,EAAE,eAAeA,WAAW,GAAC,CAA3B,CAAzG;AAAwI,kBAAA,OAAO,EAAC,UAAhJ;AAA2J,kBAAA,KAAK,EAAEoB,KAAK,CAACR;AAAxK;AAAA;AAAA;AAAA;AAAA,wBADA,eAEA,QAAC,MAAD;AAAQ,kBAAA,SAAS,EAAC,cAAlB;AAAiC,kBAAA,OAAO,EAAE,MAAMW,cAAc,CAACvC,IAAD,EAAOgB,WAAP,CAA9D;AAAA,yCAAmF,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAnF;AAAA;AAAA;AAAA;AAAA,wBAFA;AAAA,iBAAeoB,KAAK,CAACtE,IAArB;AAAA;AAAA;AAAA;AAAA,sBADD,gBAKC;AAAK,gBAAA,SAAS,EAAC,UAAf;AAAA,0BAA2BsE,KAAK,CAACR;AAAjC;AAAA;AAAA;AAAA;AAAA,sBANF,EAOCQ,KAAK,CAAClB,aAAN,CAAoB7B,GAApB,CAAwB,CAAC+C,KAAD,EAAQrB,KAAR,KAAkB;AACzC,oCACA,QAAC,QAAD;AAA2B,kBAAA,IAAI,EAAEmC,SAAjC;AAA4C,kBAAA,KAAK,MAAjD;AAAA,6BACGhD,cAAc,IAAIwC,MAAM,CAACE,WAAzB,gBAAuC,QAAC,YAAD;AAAA,2CACtC,QAAC,QAAD;AACE,sBAAA,QAAQ,EAAG9B,KAAD,IAAWM,mBAAmB,CAACN,KAAD,EAAQC,KAAR,EAAeC,WAAf,CAD1C;AAEE,sBAAA,OAAO,EAAEoB,KAAK,CAACf,OAFjB;AAGE,sBAAA,IAAI,EAAC,OAHP;AAIE,sBAAA,QAAQ,EAAE,CAAC,CAJb;AAKE,sBAAA,MAAM,EAAEnB,cALV;AAME,sBAAA,QAAQ,EAAE,CAACwC,MAAM,CAACE;AANpB;AAAA;AAAA;AAAA;AAAA;AADsC;AAAA;AAAA;AAAA;AAAA,0BAAvC,GASiB,IAVpB,eAWE,QAAC,YAAD;AAAA,2CACE,QAAC,QAAD;AACE,sBAAA,QAAQ,EAAG9B,KAAD,IAAWD,YAAY,CAACC,KAAD,EAAQC,KAAR,EAAeC,WAAf,CADnC;AAEE,sBAAA,OAAO,EAAEoB,KAAK,CAACjB,QAFjB;AAGE,sBAAA,IAAI,EAAC,OAHP;AAIE,sBAAA,QAAQ,EAAE,CAAC;AAJb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,0BAXF,EAmBGuB,MAAM,CAACE,WAAP,gBACC;AAAA,4CACE,QAAC,SAAD;AAAW,sBAAA,QAAQ,EAAG9B,KAAD,IAAWuB,aAAa,CAACvB,KAAD,EAAQd,IAAR,EAAcgB,WAAd,EAA2BD,KAA3B,CAA7C;AAAgF,sBAAA,IAAI,EAAC,OAArF;AAA6F,sBAAA,KAAK,EAAE,aAAaA,KAAK,GAAC,CAAnB,CAApG;AAA2H,sBAAA,OAAO,EAAC,UAAnI;AAA8I,sBAAA,KAAK,EAAEqB,KAAK,CAACP;AAA3J;AAAA;AAAA;AAAA;AAAA,4BADF,eAEE,QAAC,MAAD;AAAQ,sBAAA,SAAS,EAAC,cAAlB;AAAiC,sBAAA,OAAO,EAAE,MAAMY,YAAY,CAACzC,IAAD,EAAOgB,WAAP,EAAoBD,KAApB,CAA5D;AAAA,6CAAwF,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAxF;AAAA;AAAA;AAAA;AAAA,4BAFF;AAAA;AAAA;AAAA;AAAA;AAAA,0BADD,gBAKI,QAAC,YAAD;AAAc,oBAAA,EAAE,EAAEA,KAAlB;AAAyB,oBAAA,OAAO,EAAEqB,KAAK,CAACP;AAAxC;AAAA;AAAA;AAAA;AAAA,0BAxBP;AAAA,mBAAeO,KAAK,CAACtE,IAArB;AAAA;AAAA;AAAA;AAAA,wBADA;AA6BD,eA9BA,CAPD,EAsCC4E,MAAM,CAACE,WAAP,gBAAqB;AAAK,gBAAA,SAAS,EAAC,WAAf;AAAA,uCAA2B,QAAC,MAAD;AAAQ,kBAAA,OAAO,EAAE,MAAMb,YAAY,CAAC/B,IAAD,EAAOgB,WAAP,CAAnC;AAAA,yCAAwD,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAxD;AAAA;AAAA;AAAA;AAAA;AAA3B;AAAA;AAAA;AAAA;AAAA,sBAArB,GAA0I,EAtC3I;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBADF;AA8CD,OA/CgB,CAAH,GA+CV,EAjEV,eAkEM;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,kBACC0B,MAAM,CAACE,WAAP,gBAAqB,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,WAAhB;AAA4B,UAAA,OAAO,EAAE,MAAKnB,cAAc,CAACzB,IAAD,CAAxD;AAAA,kCAAgE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,kBAAhE;AAAA;AAAA;AAAA;AAAA;AAAA,gBAArB,gBACD,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,WAAhB;AAA4B,UAAA,OAAO,EAAE,MAAMwB,aAAa,EAAxD;AAAA,oBAA6DtB,cAAc,GAAG,sBAAH,GAA4B;AAAvG;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,cAlEN;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4ED;;GAtLQf,G;UAcSX,S;;;KAdTW,G;AAwLT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport ButtonAppBar from './ButtonAppBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport quizzesImported from './Quizzes'\nimport uuid from 'react-uuid'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport AddIcon from '@material-ui/icons/Add';\nimport {Container, Paper, Button, Switch, FormControlLabel, TextField} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nfunction App() {\n  const initialData = [...quizzesImported].map((quizObject) => {\n    console.log(quizObject)\n    quizObject.uuid = uuid();\n    quizObject.quizQuestions.map((questionObject) => {\n      console.log(questionObject)\n      questionObject.uuid = uuid();\n\n      return questionObject\n    })\n    return quizObject\n  });\n  console.log(\"INITIAL DATA BELOW\")\n  console.log(initialData)\n  const classes = useStyles();\n  const [data, setData] = useState([])\n  const [dataAlustettu, setDataAlustettu] = useState(false)\n  const [quiz, setQuiz] = useState(0);\n  const [answersVisible, setAnswersVisible] = useState(false)\n\n  useEffect(() => {\n    let jemma = window.localStorage;\n    let tempData = JSON.parse(jemma.getItem(\"data\"))\n    if (tempData == null) {\n      jemma.setItem(\"data\", JSON.stringify(initialData))\n      tempData = initialData\n    } \n    setData(tempData);\n    setDataAlustettu(true)\n  }, [])\n\n  useEffect(() => {\n    if (dataAlustettu) {\n      window.localStorage.setItem(\"data\", JSON.stringify(data))\n    }\n  }, [data])\n\n  const handleToggle = (event, index, parentIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected = !deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].selected;\n    setData(deepCopy)\n  };\n\n  const handleCorrectToggle = (event, index, parentIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].correct = !deepCopy[quiz].quizQuestions[parentIndex].answerOptions[index].correct;\n    setData(deepCopy)\n  };\n  \n  const selectQuiz = (quizNo) => {\n    setQuiz(quizNo);\n  }\n\n  const toggleAnswers = () => {\n    setAnswersVisible(!answersVisible);\n  }\n\n  // --------------------------------------\n  const addNewQuestion= (quizIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    let newQuestion= {question: \"\", answerOptions: [ {answer: \"\", correct: false, selected: false,uuid: uuid()}], uuid: uuid() }\n    deepCopy[quizIndex].quizQuestions.push(newQuestion) \n    setData(deepCopy)\n  }\n\n  const addNewAnswer= (quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    let newAnswer= {answer: \"\", correct: false, selected: false, uuid: uuid()}\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.push(newAnswer) \n    setData(deepCopy)\n  }\n\n  const questionChanged = (event, quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quizIndex].quizQuestions[questionIndex].question = event.target.value;\n    setData(deepCopy)\n  }\n\n  const answerChanged = (event, quizIndex, questionIndex, answerIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions[answerIndex].answer = event.target.value;\n    setData(deepCopy)\n  }\n\n  const deleteQuestion = (quizIndex, questionIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quizIndex].quizQuestions.splice(questionIndex,1)\n    setData(deepCopy)\n  }\n\n  const deleteAnswer = (quizIndex, questionIndex, answerIndex) => {\n    let deepCopy = JSON.parse(JSON.stringify(data))\n    deepCopy[quizIndex].quizQuestions[questionIndex].answerOptions.splice(answerIndex,1)\n    setData(deepCopy)\n  }\n\n  // --------------------------------------\n\n  const [status, setStatus] = React.useState({\n    teacherMode: true,\n  });\n\n  const handleChange = (event) => {\n    setStatus({ ...status, [event.target.name]: event.target.checked });\n  };\n\n  return (\n    <div>\n      <ButtonAppBar/>\n      <Container className=\"quizContainer\">\n        <div className={classes.root}>\n        <FormControlLabel\n        control={\n          <Switch\n          checked={status.teacherMode}\n          onChange={handleChange}\n          name=\"teacherMode\"\n          inputProps={{ 'aria-label': 'secondary checkbox' }}\n        />\n        }\n        label=\"Teacher mode\"/><br/>\n        {data.map((val, index) => {\n          return (\n            <Button variant=\"outlined\" onClick={() => selectQuiz(index)}>{val.quizName}</Button>\n          )\n        })}<Button onClick={() => addNewAnswer(quiz, parentIndex)}><AddCircleIcon/></Button>\n        </div>\n            {dataAlustettu ? data[quiz].quizQuestions.map((value, parentIndex) => {\n              return(\n                <div className=\"questionCard\">\n                <Paper elevation={1}>\n                <List className={classes.root}>\n                {status.teacherMode ?  \n                  <ListItem key={value.uuid} role={undefined} dense >\n                  <TextField fullWidth onChange={(event) => questionChanged(event, quiz, parentIndex)} size=\"small\" label={\"Question \" + (parentIndex+1)} variant=\"outlined\" value={value.question}/> \n                  <Button className=\"deleteButton\" onClick={() => deleteQuestion(quiz, parentIndex)}><DeleteIcon/></Button>\n                 </ListItem>\n                : <div className=\"question\">{value.question}</div>}\n                {value.answerOptions.map((value, index) => {\n                  return(\n                  <ListItem key={value.uuid} role={undefined} dense >\n                   { answersVisible || status.teacherMode ? <ListItemIcon>\n                      <Checkbox\n                        onChange={(event) => handleCorrectToggle(event, index, parentIndex)}\n                        checked={value.correct}\n                        edge=\"start\"\n                        tabIndex={-1}\n                        hidden={answersVisible}\n                        disabled={!status.teacherMode}\n                      />\n                    </ListItemIcon> : null }\n                    <ListItemIcon>\n                      <Checkbox\n                        onChange={(event) => handleToggle(event, index, parentIndex)}\n                        checked={value.selected}\n                        edge=\"start\"\n                        tabIndex={-1}\n                      />\n                    </ListItemIcon>\n                    {status.teacherMode ?  \n                      <div>\n                        <TextField onChange={(event) => answerChanged(event, quiz, parentIndex, index)} size=\"small\" label={\"Answer \" + (index+1)} variant=\"outlined\" value={value.answer}/>\n                        <Button className=\"deleteButton\" onClick={() => deleteAnswer(quiz, parentIndex, index)}><DeleteIcon/></Button> \n                      </div>\n                      :  <ListItemText id={index} primary={value.answer} />\n                    }\n                  </ListItem>\n                  )\n                })}\n                {status.teacherMode ? <div className=\"addButton\"><Button onClick={() => addNewAnswer(quiz, parentIndex)}><AddCircleIcon/></Button></div> : \"\"}\n                </List>\n                </Paper>\n                </div>\n              );\n            }): \"\" }\n            <div className=\"bottomButtons\">\n            {status.teacherMode ? <Button variant=\"contained\" onClick={() =>addNewQuestion(quiz)}><AddIcon/>   Add new question</Button> : \n            <Button variant=\"contained\" onClick={() => toggleAnswers()}>{answersVisible ? \"Hide correct answers\" : \"Show correct answers\"}</Button> \n            }</div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}